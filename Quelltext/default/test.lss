
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ae  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000080f  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e3  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000498  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000182  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022d  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 eb       	ldi	r30, 0xB2	; 178
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	89 d0       	rcall	.+274    	; 0x15c <main>
  4a:	b1 c0       	rjmp	.+354    	; 0x1ae <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <lcdWriteNibble>:
    Depending on the value of LCD_RS the byte is written to display(LCD_RS=1) or register (LCD_RS=0)

   \param b is the nibble to be send. Only bits 4..7 are used
*/// -------------------------------------------------------------------------
void lcdWriteNibble(U8 b) { //b: only Bits 4..7 are used
      asm volatile ("nop"); // 1 NOP bei 8MHz braucht etwa  125ns.  t_AS: 40ns min 
  4e:	00 00       	nop
      LCD_ENABLE;
  50:	92 9a       	sbi	0x12, 2	; 18
      LCD_DATA = (LCD_DATA & 0x0F) | (b & 0xf0); 
  52:	92 b3       	in	r25, 0x12	; 18
  54:	80 7f       	andi	r24, 0xF0	; 240
  56:	9f 70       	andi	r25, 0x0F	; 15
  58:	98 2b       	or	r25, r24
  5a:	92 bb       	out	0x12, r25	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  5c:	8a e0       	ldi	r24, 0x0A	; 10
  5e:	8a 95       	dec	r24
  60:	f1 f7       	brne	.-4      	; 0x5e <lcdWriteNibble+0x10>
      _delay_us(4); //t_DSW: 80ns min.
      LCD_DISABLE;
  62:	92 98       	cbi	0x12, 2	; 18
  64:	85 e0       	ldi	r24, 0x05	; 5
  66:	8a 95       	dec	r24
  68:	f1 f7       	brne	.-4      	; 0x66 <lcdWriteNibble+0x18>
      //t_H: 10ns min
      //t_CYC 500ns min
      _delay_us(2);
}
  6a:	08 95       	ret

0000006c <lcdWrite>:
    Depending on the value of LCD_RS the byte is written to display(LCD_RS=1) or register (LCD_RS=0)

   \param b is the byte to be send.
   \note the BUSY-Flag isn't checked (since we can't read from display with R/W hard-wired to GND)
*/// -------------------------------------------------------------------------
void lcdWrite(U8 b) { 
  6c:	1f 93       	push	r17
  6e:	18 2f       	mov	r17, r24
  lcdWriteNibble(b);
  70:	ee df       	rcall	.-36     	; 0x4e <lcdWriteNibble>
  lcdWriteNibble(b<<4);
  72:	81 2f       	mov	r24, r17
  74:	82 95       	swap	r24
  76:	80 7f       	andi	r24, 0xF0	; 240
  78:	ea df       	rcall	.-44     	; 0x4e <lcdWriteNibble>
  7a:	85 e8       	ldi	r24, 0x85	; 133
  7c:	8a 95       	dec	r24
  7e:	f1 f7       	brne	.-4      	; 0x7c <lcdWrite+0x10>
  //Delay >37µs  
  _delay_us(50);
  // CAUTION: we do not check the BUSY-Flag (since we can't read from display)
  // CAUTION: so for HOME and CLEAR commands the user has to add 2ms delay!
}
  80:	1f 91       	pop	r17
  82:	08 95       	ret

00000084 <lcdWrite9>:

// ---------------------------------------------------------------------------
void lcdWrite9(U8 n){ //Write one digit. Allowed are values from 0..9
  lcdWrite(48+n);
  84:	80 5d       	subi	r24, 0xD0	; 208
  86:	f2 df       	rcall	.-28     	; 0x6c <lcdWrite>
}
  88:	08 95       	ret

0000008a <cmd2Lcd>:

// ---------------------------------------------------------------------------
void cmd2Lcd(U8 cmd) {
  LCD_RS_OFF;
  8a:	93 98       	cbi	0x12, 3	; 18
  8c:	95 ed       	ldi	r25, 0xD5	; 213
  8e:	9a 95       	dec	r25
  90:	f1 f7       	brne	.-4      	; 0x8e <cmd2Lcd+0x4>
  _delay_us(80);
  lcdWrite(cmd);
  92:	ec df       	rcall	.-40     	; 0x6c <lcdWrite>
  LCD_RS_ON;
  94:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	90 e1       	ldi	r25, 0x10	; 16
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <cmd2Lcd+0x10>
  _delay_us(2050);
}
  9e:	08 95       	ret

000000a0 <clearLcd>:
/*! Clear LCD and set cursor home
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------

void clearLcd(void) {
  cmd2Lcd(0x01);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	f3 df       	rcall	.-26     	; 0x8a <cmd2Lcd>
}
  a4:	08 95       	ret

000000a6 <home1Lcd>:
// ---------------------------------------------------------------------------
/*! Set cursor home in line 1
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------
void home1Lcd(void) {
  cmd2Lcd(2);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	f0 df       	rcall	.-32     	; 0x8a <cmd2Lcd>
}
  aa:	08 95       	ret

000000ac <home2Lcd>:
// ---------------------------------------------------------------------------
/*! Set cursor at start of Line 2
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------
void home2Lcd(void) {
  cmd2Lcd(192);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	ed df       	rcall	.-38     	; 0x8a <cmd2Lcd>
}
  b0:	08 95       	ret

000000b2 <lcdInit>:

// ---------------------------------------------------------------------------
/*! Initialize display (2 Lines, 4 Bit, no shift, increment)
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------
void lcdInit(void) {
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17

  LCD_RS_OFF;
  b6:	93 98       	cbi	0x12, 3	; 18
  b8:	88 e5       	ldi	r24, 0x58	; 88
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdInit+0xa>
  _delay_us(300);
  LCD_ENABLE;
  c0:	92 9a       	sbi	0x12, 2	; 18
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	9c e9       	ldi	r25, 0x9C	; 156
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcdInit+0x14>

  //Delay >15ms - passierte eigentlich bereits in cldInit
  _delay_ms(20);
  
  lcdWriteNibble(0x30); // DB5=1 DB4=1        # see BATRON-Specification for HD44780, page 58
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	c0 df       	rcall	.-128    	; 0x4e <lcdWriteNibble>
  ce:	00 e3       	ldi	r16, 0x30	; 48
  d0:	15 e7       	ldi	r17, 0x75	; 117
  d2:	c8 01       	movw	r24, r16
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcdInit+0x22>
  _delay_ms(15);    // wait more than 4.1ms

  lcdWriteNibble(0x30); // DB5=1 DB4=1
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	b9 df       	rcall	.-142    	; 0x4e <lcdWriteNibble>
  dc:	c8 01       	movw	r24, r16
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcdInit+0x2c>
  _delay_ms(15);    // wait more than 100us

  lcdWriteNibble(0x30); // DB5=1 DB4=1
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	b4 df       	rcall	.-152    	; 0x4e <lcdWriteNibble>
  e6:	c8 01       	movw	r24, r16
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcdInit+0x36>
  _delay_ms(15);    // wait more than 100us


  lcdWrite(0x28); //2 Lines, 4Bit Data,   0 0 1 DL  N F * *  DL:0=4Bit, 1=8Bit  n:0=1Zeile, 1:2Zeilen  F:0=5x7, 1=5x11 Pixel
  ec:	88 e2       	ldi	r24, 0x28	; 40
  ee:	be df       	rcall	.-132    	; 0x6c <lcdWrite>
  f0:	00 ed       	ldi	r16, 0xD0	; 208
  f2:	17 e0       	ldi	r17, 0x07	; 7
  f4:	c8 01       	movw	r24, r16
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcdInit+0x44>
  _delay_us(1000);    //just for paranoia
  lcdWrite(0x28); //2 Lines, 4Bit Data,  
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	b7 df       	rcall	.-146    	; 0x6c <lcdWrite>
  fe:	c8 01       	movw	r24, r16
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcdInit+0x4e>
  _delay_us(1000);    //just for paranoia

  lcdWrite(0x08); // Display off
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	b2 df       	rcall	.-156    	; 0x6c <lcdWrite>
 108:	c8 01       	movw	r24, r16
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcdInit+0x58>
  _delay_us(1000);    //just for paranoia  

  lcdWrite(0x0c); // Display on, Cursor + Blink off
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	ad df       	rcall	.-166    	; 0x6c <lcdWrite>
 112:	c8 01       	movw	r24, r16
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdInit+0x62>
  _delay_us(1000);    //just for paranoia  
/*
  lcdWrite(0x01); // Display clear
  _delay_ms(3);
*/
  lcdWrite(0x06); // Entry mode; no shift
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	a8 df       	rcall	.-176    	; 0x6c <lcdWrite>
 11c:	80 ea       	ldi	r24, 0xA0	; 160
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcdInit+0x6e>
  _delay_us(2000);
  
  LCD_RS_ON;
 124:	93 9a       	sbi	0x12, 3	; 18
}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <sendStringToLCD>:

//----- String sofort senden ----------------------------------------------------------
void sendStringToLCD(U8 *str)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	05 c0       	rjmp	.+10     	; 0x146 <sendStringToLCD+0x1a>

  //Zeichen fuer Zeichen senden (ohne abschliessende '\0')
  i = 0;
  while (str[i] !=0)
  {
    lcdWrite(str[i]);
 13c:	97 df       	rcall	.-210    	; 0x6c <lcdWrite>
 13e:	21 96       	adiw	r28, 0x01	; 1
    i++;
    // mehr als 8 Zeichen werden nie an das Display gesendet
    if (i > 7){
 140:	c8 30       	cpi	r28, 0x08	; 8
 142:	d1 05       	cpc	r29, r1
 144:	31 f0       	breq	.+12     	; 0x152 <sendStringToLCD+0x26>
{
  U8 i;

  //Zeichen fuer Zeichen senden (ohne abschliessende '\0')
  i = 0;
  while (str[i] !=0)
 146:	f8 01       	movw	r30, r16
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	a9 f7       	brne	.-22     	; 0x13c <sendStringToLCD+0x10>
    // mehr als 8 Zeichen werden nie an das Display gesendet
    if (i > 7){
      break;
    }
  }
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <main>:
#define I32   signed long 
#define U32 unsigned long 


//--------------------------------------------------------
int main(void){
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
float bestRx=99000111; //99M

U16 inaccuracy_min;
U8 i;

lcdInit();
 160:	a8 df       	rcall	.-176    	; 0xb2 <lcdInit>
 162:	88 ee       	ldi	r24, 0xE8	; 232
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	28 ec       	ldi	r18, 0xC8	; 200
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 172:	d9 f7       	brne	.-10     	; 0x16a <main+0xe>
	_delay_ms(100);
clearLcd();
 174:	95 df       	rcall	.-214    	; 0xa0 <clearLcd>
 176:	88 ee       	ldi	r24, 0xE8	; 232
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	28 ec       	ldi	r18, 0xC8	; 200
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <main+0x22>
 188:	20 e1       	ldi	r18, 0x10	; 16
 18a:	37 e2       	ldi	r19, 0x27	; 39
 18c:	c8 ec       	ldi	r28, 0xC8	; 200
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	05 c0       	rjmp	.+10     	; 0x19c <main+0x40>
 192:	ce 01       	movw	r24, r28
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19c:	21 15       	cp	r18, r1
 19e:	31 05       	cpc	r19, r1
 1a0:	c1 f7       	brne	.-16     	; 0x192 <main+0x36>


	while(1){

	_delay_ms(1000);
	sendStringToLCD("Hello World");
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	c2 df       	rcall	.-124    	; 0x12c <sendStringToLCD>
 1a8:	20 e1       	ldi	r18, 0x10	; 16
 1aa:	37 e2       	ldi	r19, 0x27	; 39
 1ac:	f2 cf       	rjmp	.-28     	; 0x192 <main+0x36>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
