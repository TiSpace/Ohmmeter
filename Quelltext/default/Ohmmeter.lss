
Ohmmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000df0  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ca  008000ca  00000eee  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000137  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2b  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000328  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000903  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000218  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ea  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	5a c2       	rjmp	.+1204   	; 0x4c8 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ef       	ldi	r30, 0xF0	; 240
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 3c       	cpi	r26, 0xCA	; 202
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa ec       	ldi	r26, 0xCA	; 202
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 3c       	cpi	r26, 0xCE	; 206
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	18 d4       	rcall	.+2096   	; 0x88a <main>
  5a:	c8 c6       	rjmp	.+3472   	; 0xdec <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcdWriteNibble>:
    Depending on the value of LCD_RS the byte is written to display(LCD_RS=1) or register (LCD_RS=0)

   \param b is the nibble to be send. Only bits 4..7 are used
*/// -------------------------------------------------------------------------
void lcdWriteNibble(U8 b) { //b: only Bits 4..7 are used
      asm volatile ("nop"); // 1 NOP bei 8MHz braucht etwa  125ns.  t_AS: 40ns min 
  5e:	00 00       	nop
      LCD_ENABLE;
  60:	92 9a       	sbi	0x12, 2	; 18
      LCD_DATA = (LCD_DATA & 0x0F) | (b & 0xf0); 
  62:	92 b3       	in	r25, 0x12	; 18
  64:	80 7f       	andi	r24, 0xF0	; 240
  66:	9f 70       	andi	r25, 0x0F	; 15
  68:	98 2b       	or	r25, r24
  6a:	92 bb       	out	0x12, r25	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  6c:	8a e0       	ldi	r24, 0x0A	; 10
  6e:	8a 95       	dec	r24
  70:	f1 f7       	brne	.-4      	; 0x6e <lcdWriteNibble+0x10>
      _delay_us(4); //t_DSW: 80ns min.
      LCD_DISABLE;
  72:	92 98       	cbi	0x12, 2	; 18
  74:	85 e0       	ldi	r24, 0x05	; 5
  76:	8a 95       	dec	r24
  78:	f1 f7       	brne	.-4      	; 0x76 <lcdWriteNibble+0x18>
      //t_H: 10ns min
      //t_CYC 500ns min
      _delay_us(2);
}
  7a:	08 95       	ret

0000007c <lcdWrite>:
    Depending on the value of LCD_RS the byte is written to display(LCD_RS=1) or register (LCD_RS=0)

   \param b is the byte to be send.
   \note the BUSY-Flag isn't checked (since we can't read from display with R/W hard-wired to GND)
*/// -------------------------------------------------------------------------
void lcdWrite(U8 b) { 
  7c:	1f 93       	push	r17
  7e:	18 2f       	mov	r17, r24
  lcdWriteNibble(b);
  80:	ee df       	rcall	.-36     	; 0x5e <lcdWriteNibble>
  lcdWriteNibble(b<<4);
  82:	81 2f       	mov	r24, r17
  84:	82 95       	swap	r24
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	ea df       	rcall	.-44     	; 0x5e <lcdWriteNibble>
  8a:	85 e8       	ldi	r24, 0x85	; 133
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcdWrite+0x10>
  //Delay >37µs  
  _delay_us(50);
  // CAUTION: we do not check the BUSY-Flag (since we can't read from display)
  // CAUTION: so for HOME and CLEAR commands the user has to add 2ms delay!
}
  90:	1f 91       	pop	r17
  92:	08 95       	ret

00000094 <lcdWrite9>:

// ---------------------------------------------------------------------------
void lcdWrite9(U8 n){ //Write one digit. Allowed are values from 0..9
  lcdWrite(48+n);
  94:	80 5d       	subi	r24, 0xD0	; 208
  96:	f2 df       	rcall	.-28     	; 0x7c <lcdWrite>
}
  98:	08 95       	ret

0000009a <cmd2Lcd>:

// ---------------------------------------------------------------------------
void cmd2Lcd(U8 cmd) {
  LCD_RS_OFF;
  9a:	93 98       	cbi	0x12, 3	; 18
  9c:	95 ed       	ldi	r25, 0xD5	; 213
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <cmd2Lcd+0x4>
  _delay_us(80);
  lcdWrite(cmd);
  a2:	ec df       	rcall	.-40     	; 0x7c <lcdWrite>
  LCD_RS_ON;
  a4:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	90 e1       	ldi	r25, 0x10	; 16
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <cmd2Lcd+0x10>
  _delay_us(2050);
}
  ae:	08 95       	ret

000000b0 <clearLcd>:
/*! Clear LCD and set cursor home
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------

void clearLcd(void) {
  cmd2Lcd(0x01);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	f3 df       	rcall	.-26     	; 0x9a <cmd2Lcd>
}
  b4:	08 95       	ret

000000b6 <home1Lcd>:
// ---------------------------------------------------------------------------
/*! Set cursor home in line 1
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------
void home1Lcd(void) {
  cmd2Lcd(2);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	f0 df       	rcall	.-32     	; 0x9a <cmd2Lcd>
}
  ba:	08 95       	ret

000000bc <home2Lcd>:
// ---------------------------------------------------------------------------
/*! Set cursor at start of Line 2
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------
void home2Lcd(void) {
  cmd2Lcd(192);
  bc:	80 ec       	ldi	r24, 0xC0	; 192
  be:	ed df       	rcall	.-38     	; 0x9a <cmd2Lcd>
}
  c0:	08 95       	ret

000000c2 <lcdInit>:

// ---------------------------------------------------------------------------
/*! Initialize display (2 Lines, 4 Bit, no shift, increment)
   (HD 44780 based displays only)
*/// -------------------------------------------------------------------------
void lcdInit(void) {
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17

  LCD_RS_OFF;
  c6:	93 98       	cbi	0x12, 3	; 18
  c8:	88 e5       	ldi	r24, 0x58	; 88
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdInit+0xa>
  _delay_us(300);
  LCD_ENABLE;
  d0:	92 9a       	sbi	0x12, 2	; 18
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	9c e9       	ldi	r25, 0x9C	; 156
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcdInit+0x14>

  //Delay >15ms - passierte eigentlich bereits in cldInit
  _delay_ms(20);
  
  lcdWriteNibble(0x30); // DB5=1 DB4=1        # see BATRON-Specification for HD44780, page 58
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	c0 df       	rcall	.-128    	; 0x5e <lcdWriteNibble>
  de:	00 e3       	ldi	r16, 0x30	; 48
  e0:	15 e7       	ldi	r17, 0x75	; 117
  e2:	c8 01       	movw	r24, r16
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcdInit+0x22>
  _delay_ms(15);    // wait more than 4.1ms

  lcdWriteNibble(0x30); // DB5=1 DB4=1
  e8:	80 e3       	ldi	r24, 0x30	; 48
  ea:	b9 df       	rcall	.-142    	; 0x5e <lcdWriteNibble>
  ec:	c8 01       	movw	r24, r16
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcdInit+0x2c>
  _delay_ms(15);    // wait more than 100us

  lcdWriteNibble(0x30); // DB5=1 DB4=1
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	b4 df       	rcall	.-152    	; 0x5e <lcdWriteNibble>
  f6:	c8 01       	movw	r24, r16
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcdInit+0x36>
  _delay_ms(15);    // wait more than 100us


  lcdWrite(0x28); //2 Lines, 4Bit Data,   0 0 1 DL  N F * *  DL:0=4Bit, 1=8Bit  n:0=1Zeile, 1:2Zeilen  F:0=5x7, 1=5x11 Pixel
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	be df       	rcall	.-132    	; 0x7c <lcdWrite>
 100:	00 ed       	ldi	r16, 0xD0	; 208
 102:	17 e0       	ldi	r17, 0x07	; 7
 104:	c8 01       	movw	r24, r16
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcdInit+0x44>
  _delay_us(1000);    //just for paranoia
  lcdWrite(0x28); //2 Lines, 4Bit Data,  
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	b7 df       	rcall	.-146    	; 0x7c <lcdWrite>
 10e:	c8 01       	movw	r24, r16
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcdInit+0x4e>
  _delay_us(1000);    //just for paranoia

  lcdWrite(0x08); // Display off
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	b2 df       	rcall	.-156    	; 0x7c <lcdWrite>
 118:	c8 01       	movw	r24, r16
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcdInit+0x58>
  _delay_us(1000);    //just for paranoia  

  lcdWrite(0x0c); // Display on, Cursor + Blink off
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	ad df       	rcall	.-166    	; 0x7c <lcdWrite>
 122:	c8 01       	movw	r24, r16
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcdInit+0x62>
  _delay_us(1000);    //just for paranoia  
/*
  lcdWrite(0x01); // Display clear
  _delay_ms(3);
*/
  lcdWrite(0x06); // Entry mode; no shift
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	a8 df       	rcall	.-176    	; 0x7c <lcdWrite>
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcdInit+0x6e>
  _delay_us(2000);
  
  LCD_RS_ON;
 134:	93 9a       	sbi	0x12, 3	; 18
}
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <sendStringToLCD>:

//----- String sofort senden ----------------------------------------------------------
void sendStringToLCD(U8 *str)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	8c 01       	movw	r16, r24
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <sendStringToLCD+0x1a>

  //Zeichen fuer Zeichen senden (ohne abschliessende '\0')
  i = 0;
  while (str[i] !=0)
  {
    lcdWrite(str[i]);
 14c:	97 df       	rcall	.-210    	; 0x7c <lcdWrite>
 14e:	21 96       	adiw	r28, 0x01	; 1
    i++;
    // mehr als 8 Zeichen werden nie an das Display gesendet
    if (i > 7){
 150:	c8 30       	cpi	r28, 0x08	; 8
 152:	d1 05       	cpc	r29, r1
 154:	31 f0       	breq	.+12     	; 0x162 <sendStringToLCD+0x26>
{
  U8 i;

  //Zeichen fuer Zeichen senden (ohne abschliessende '\0')
  i = 0;
  while (str[i] !=0)
 156:	f8 01       	movw	r30, r16
 158:	ec 0f       	add	r30, r28
 15a:	fd 1f       	adc	r31, r29
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	a9 f7       	brne	.-22     	; 0x14c <sendStringToLCD+0x10>
    // mehr als 8 Zeichen werden nie an das Display gesendet
    if (i > 7){
      break;
    }
  }
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <getAdc>:

U16 g_inaccuracy;
volatile U16 g_powerdown;

//--------------------------------------------------------
U16 getAdc(void){
 16c:	4f e0       	ldi	r20, 0x0F	; 15
 16e:	57 e2       	ldi	r21, 0x27	; 39
 170:	84 e6       	ldi	r24, 0x64	; 100
 172:	90 e0       	ldi	r25, 0x00	; 0

  a=9999;
  cnt=100;
  do{ //bis zu 100mal messen, bis 2x hintereinander der gleiche Wert rauskommt 
    b=a;
    ADCSRA |= (1<<ADSC);
 174:	36 9a       	sbi	0x06, 6	; 6
    while (ADCSRA & (1<<ADSC))
 176:	36 99       	sbic	0x06, 6	; 6
 178:	fe cf       	rjmp	.-4      	; 0x176 <getAdc+0xa>
    ;
    a=ADC;
 17a:	24 b1       	in	r18, 0x04	; 4
 17c:	35 b1       	in	r19, 0x05	; 5
  }while ((a!=b) && (--cnt));
 17e:	24 17       	cp	r18, r20
 180:	35 07       	cpc	r19, r21
 182:	21 f0       	breq	.+8      	; 0x18c <getAdc+0x20>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	11 f0       	breq	.+4      	; 0x18c <getAdc+0x20>
 188:	a9 01       	movw	r20, r18
 18a:	f4 cf       	rjmp	.-24     	; 0x174 <getAdc+0x8>
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
  
  //Mittelwert über 32 Messwerte
  sum=0;
  for (n=0; n<32; n++){
    ADCSRA |= (1<<ADSC);
 192:	36 9a       	sbi	0x06, 6	; 6
    while (ADCSRA & (1<<ADSC))
 194:	36 99       	sbic	0x06, 6	; 6
 196:	fe cf       	rjmp	.-4      	; 0x194 <getAdc+0x28>
    ;
    sum+=ADC;
 198:	84 b1       	in	r24, 0x04	; 4
 19a:	95 b1       	in	r25, 0x05	; 5
 19c:	28 0f       	add	r18, r24
 19e:	39 1f       	adc	r19, r25
    a=ADC;
  }while ((a!=b) && (--cnt));
  
  //Mittelwert über 32 Messwerte
  sum=0;
  for (n=0; n<32; n++){
 1a0:	4f 5f       	subi	r20, 0xFF	; 255
 1a2:	40 32       	cpi	r20, 0x20	; 32
 1a4:	b1 f7       	brne	.-20     	; 0x192 <getAdc+0x26>
    while (ADCSRA & (1<<ADSC))
    ;
    sum+=ADC;
  }
  return sum; //0..32736
}
 1a6:	c9 01       	movw	r24, r18
 1a8:	08 95       	ret

000001aa <measureRx>:

//--------------------------------------------------------
float measureRx(U8 n){  // n ist der Index für den Referenzwiderstand. Setzt g_inaccuracy.
 1aa:	8f 92       	push	r8
 1ac:	9f 92       	push	r9
 1ae:	af 92       	push	r10
 1b0:	bf 92       	push	r11
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
float Rx, R1,R2;
float Uxx;
float Ixx;


  if (n<7){
 1c2:	87 30       	cpi	r24, 0x07	; 7
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <measureRx+0x1e>
 1c6:	5b c0       	rjmp	.+182    	; 0x27e <measureRx+0xd4>
    //select reference resistor
    PORTB=g_mask[n]; //Entweder ein Portpin ist High (Ausgang) oder hochohmig (Eingang).
 1c8:	08 2f       	mov	r16, r24
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	f8 01       	movw	r30, r16
 1ce:	e1 59       	subi	r30, 0x91	; 145
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
 1d4:	88 bb       	out	0x18, r24	; 24
    DDRB =g_mask[n];   
 1d6:	87 bb       	out	0x17, r24	; 23
 
    if (g_mux[n]>0){
 1d8:	f8 01       	movw	r30, r16
 1da:	ee 56       	subi	r30, 0x6E	; 110
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	e0 81       	ld	r30, Z
 1e0:	ee 23       	and	r30, r30
 1e2:	29 f4       	brne	.+10     	; 0x1ee <measureRx+0x44>
 1e4:	30 ee       	ldi	r19, 0xE0	; 224
 1e6:	c3 2e       	mov	r12, r19
 1e8:	3f e7       	ldi	r19, 0x7F	; 127
 1ea:	d3 2e       	mov	r13, r19
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <measureRx+0x54>
      ADMUX = (1<<REFS0) | g_mux[n]; //Uref= Vcc. Channel mux[n]  (U0)
 1ee:	e0 64       	ori	r30, 0x40	; 64
 1f0:	e7 b9       	out	0x07, r30	; 7
 1f2:	80 ed       	ldi	r24, 0xD0	; 208
 1f4:	97 e0       	ldi	r25, 0x07	; 7
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <measureRx+0x4c>
      _delay_ms(1); 
      U0 = getAdc();
 1fa:	b8 df       	rcall	.-144    	; 0x16c <getAdc>
 1fc:	6c 01       	movw	r12, r24
    }else{ //Fuer die hohen Widerstandswerte (330K, 2.2M) spielt der Innenwiderstand des Ports keine Rolle mehr.
           //Als U0 wird daher die Referenzspannung angenommen, also 32*1023=32736
      U0 = 32736;     
    }
    ADMUX = (1<<REFS0); //Uref= Vcc. Channel ADC0 (Ux)
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	87 b9       	out	0x07, r24	; 7
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	97 e2       	ldi	r25, 0x27	; 39
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <measureRx+0x5c>
    _delay_ms(5);  //Gib dem S+H Kondensator Zeit zum laden
    Ux = getAdc();
 20a:	b0 df       	rcall	.-160    	; 0x16c <getAdc>
 20c:	ec 01       	movw	r28, r24

    DDRB=0; //Referenzwiderstände abschalten (Strom sparen)
 20e:	17 ba       	out	0x17, r1	; 23
    PORTB=0;
 210:	18 ba       	out	0x18, r1	; 24
  
    if (Ux >= 16368){  // 16*1023 (entspricht Uref/2)
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	c0 3f       	cpi	r28, 0xF0	; 240
 216:	d8 07       	cpc	r29, r24
 218:	48 f0       	brcs	.+18     	; 0x22c <measureRx+0x82>
      g_inaccuracy = Ux - 16368;
 21a:	c0 5f       	subi	r28, 0xF0	; 240
 21c:	df 43       	sbci	r29, 0x3F	; 63
 21e:	d0 93 cd 00 	sts	0x00CD, r29
 222:	c0 93 cc 00 	sts	0x00CC, r28
 226:	c0 51       	subi	r28, 0x10	; 16
 228:	d0 4c       	sbci	r29, 0xC0	; 192
 22a:	08 c0       	rjmp	.+16     	; 0x23c <measureRx+0x92>
    }else{
      g_inaccuracy = 16368 - Ux;
 22c:	80 ef       	ldi	r24, 0xF0	; 240
 22e:	9f e3       	ldi	r25, 0x3F	; 63
 230:	8c 1b       	sub	r24, r28
 232:	9d 0b       	sbc	r25, r29
 234:	90 93 cd 00 	sts	0x00CD, r25
 238:	80 93 cc 00 	sts	0x00CC, r24
    }
 
    if (U0!=Ux){ //Division durch Null vermeiden
 23c:	cc 16       	cp	r12, r28
 23e:	dd 06       	cpc	r13, r29
 240:	09 f4       	brne	.+2      	; 0x244 <measureRx+0x9a>
 242:	88 c0       	rjmp	.+272    	; 0x354 <measureRx+0x1aa>
      //Irref = (U0-Ux) / Rref
      //    damit ist der Testwiderstand:
      //Rx = Ux /((U0-Ux) / Rref)
      //    etwas Umgeformt:
      //Rx = Ux * Rref / (U0 - Ux);
      Rx = Ux;
 244:	be 01       	movw	r22, r28
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	76 d4       	rcall	.+2284   	; 0xb38 <__floatunsisf>
      Rx *= g_Rref[n];
 24c:	00 0f       	add	r16, r16
 24e:	11 1f       	adc	r17, r17
 250:	00 0f       	add	r16, r16
 252:	11 1f       	adc	r17, r17
 254:	0a 58       	subi	r16, 0x8A	; 138
 256:	1f 4f       	sbci	r17, 0xFF	; 255
 258:	f8 01       	movw	r30, r16
 25a:	20 81       	ld	r18, Z
 25c:	31 81       	ldd	r19, Z+1	; 0x01
 25e:	42 81       	ldd	r20, Z+2	; 0x02
 260:	53 81       	ldd	r21, Z+3	; 0x03
 262:	20 d5       	rcall	.+2624   	; 0xca4 <__mulsf3>
 264:	7b 01       	movw	r14, r22
 266:	8c 01       	movw	r16, r24
      Rx /= U0 - Ux;
 268:	cc 1a       	sub	r12, r28
 26a:	dd 0a       	sbc	r13, r29
 26c:	b6 01       	movw	r22, r12
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	62 d4       	rcall	.+2244   	; 0xb38 <__floatunsisf>
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	c8 01       	movw	r24, r16
 27a:	b7 01       	movw	r22, r14
 27c:	74 c0       	rjmp	.+232    	; 0x366 <measureRx+0x1bc>
      return Rx; 
    }else{
      return 90000000.0; //90M - quasi unendlich
    }
  }else{//Spezialmessung mit 2 parallelen Referenzwiderständen
    PORTB=BIT0|BIT6; // 125+150 Ohm einschalten
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	88 bb       	out	0x18, r24	; 24
    DDRB =BIT0|BIT6;
 282:	87 bb       	out	0x17, r24	; 23
    
    ADMUX = (1<<REFS0) | 1; //Uref= Vcc. Channel 1 (U über 125R)
 284:	87 b9       	out	0x07, r24	; 7
 286:	00 ed       	ldi	r16, 0xD0	; 208
 288:	17 e0       	ldi	r17, 0x07	; 7
 28a:	c8 01       	movw	r24, r16
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <measureRx+0xe2>
    _delay_ms(1); 
    U1 = getAdc();
 290:	6d df       	rcall	.-294    	; 0x16c <getAdc>
 292:	ec 01       	movw	r28, r24

    ADMUX = (1<<REFS0) | 2; //Uref= Vcc. Channel 2 (U über 150R)
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	87 b9       	out	0x07, r24	; 7
 298:	c8 01       	movw	r24, r16
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <measureRx+0xf0>
    _delay_ms(1); 
    U2 = getAdc();
 29e:	66 df       	rcall	.-308    	; 0x16c <getAdc>
 2a0:	4c 01       	movw	r8, r24

    ADMUX = (1<<REFS0); //Uref= Vcc. Channel ADC0 (Ux)
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	87 b9       	out	0x07, r24	; 7
 2a6:	c8 01       	movw	r24, r16
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <measureRx+0xfe>
    _delay_ms(1);  //Gib dem S+H Kondensator Zeit zum laden
    Uxx = getAdc();
 2ac:	5f df       	rcall	.-322    	; 0x16c <getAdc>
 2ae:	a0 e0       	ldi	r26, 0x00	; 0
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	bc 01       	movw	r22, r24
 2b4:	cd 01       	movw	r24, r26
 2b6:	40 d4       	rcall	.+2176   	; 0xb38 <__floatunsisf>
 2b8:	5b 01       	movw	r10, r22
 2ba:	6c 01       	movw	r12, r24

    DDRB=0; //Referenzwiderstände abschalten (Strom sparen)
 2bc:	17 ba       	out	0x17, r1	; 23
    PORTB=0;
 2be:	18 ba       	out	0x18, r1	; 24
  
    if (Uxx >= 16368){  // 16*1023 (entspricht Uref/2)
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 ec       	ldi	r19, 0xC0	; 192
 2c4:	4f e7       	ldi	r20, 0x7F	; 127
 2c6:	56 e4       	ldi	r21, 0x46	; 70
 2c8:	e9 d4       	rcall	.+2514   	; 0xc9c <__gesf2>
 2ca:	88 23       	and	r24, r24
 2cc:	3c f0       	brlt	.+14     	; 0x2dc <measureRx+0x132>
      g_inaccuracy = Uxx - 16368;
 2ce:	c6 01       	movw	r24, r12
 2d0:	b5 01       	movw	r22, r10
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 ec       	ldi	r19, 0xC0	; 192
 2d6:	4f e7       	ldi	r20, 0x7F	; 127
 2d8:	56 e4       	ldi	r21, 0x46	; 70
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <measureRx+0x13e>
    }else{
      g_inaccuracy = 16368 - Uxx;
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	70 ec       	ldi	r23, 0xC0	; 192
 2e0:	8f e7       	ldi	r24, 0x7F	; 127
 2e2:	96 e4       	ldi	r25, 0x46	; 70
 2e4:	a6 01       	movw	r20, r12
 2e6:	95 01       	movw	r18, r10
 2e8:	2a d3       	rcall	.+1620   	; 0x93e <__subsf3>
 2ea:	fa d3       	rcall	.+2036   	; 0xae0 <__fixunssfsi>
 2ec:	70 93 cd 00 	sts	0x00CD, r23
 2f0:	60 93 cc 00 	sts	0x00CC, r22
    }
    R1=g_Rref[6]; //125R
    R2=g_Rref[5]; //150R


    Ixx = (U1-Uxx)/R1 + (U2-Uxx)/R2;  //Ixx = I1 + I2
 2f4:	be 01       	movw	r22, r28
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	1e d4       	rcall	.+2108   	; 0xb38 <__floatunsisf>
 2fc:	a6 01       	movw	r20, r12
 2fe:	95 01       	movw	r18, r10
 300:	1e d3       	rcall	.+1596   	; 0x93e <__subsf3>
 302:	20 91 8e 00 	lds	r18, 0x008E
 306:	30 91 8f 00 	lds	r19, 0x008F
 30a:	40 91 90 00 	lds	r20, 0x0090
 30e:	50 91 91 00 	lds	r21, 0x0091
 312:	7e d3       	rcall	.+1788   	; 0xa10 <__divsf3>
 314:	7b 01       	movw	r14, r22
 316:	8c 01       	movw	r16, r24
 318:	b4 01       	movw	r22, r8
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0c d4       	rcall	.+2072   	; 0xb38 <__floatunsisf>
 320:	a6 01       	movw	r20, r12
 322:	95 01       	movw	r18, r10
 324:	0c d3       	rcall	.+1560   	; 0x93e <__subsf3>
 326:	20 91 8a 00 	lds	r18, 0x008A
 32a:	30 91 8b 00 	lds	r19, 0x008B
 32e:	40 91 8c 00 	lds	r20, 0x008C
 332:	50 91 8d 00 	lds	r21, 0x008D
 336:	6c d3       	rcall	.+1752   	; 0xa10 <__divsf3>
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	c8 01       	movw	r24, r16
 33e:	b7 01       	movw	r22, r14
 340:	ff d2       	rcall	.+1534   	; 0x940 <__addsf3>
 342:	7b 01       	movw	r14, r22
 344:	8c 01       	movw	r16, r24
    if (0!=Ixx){
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	5c d3       	rcall	.+1720   	; 0xa08 <__cmpsf2>
 350:	88 23       	and	r24, r24
 352:	29 f4       	brne	.+10     	; 0x35e <measureRx+0x1b4>
 354:	e0 e5       	ldi	r30, 0x50	; 80
 356:	79 ea       	ldi	r23, 0xA9	; 169
 358:	8b ea       	ldi	r24, 0xAB	; 171
 35a:	6c e4       	ldi	r22, 0x4C	; 76
 35c:	07 c0       	rjmp	.+14     	; 0x36c <measureRx+0x1c2>
      Rx = Uxx  / Ixx;
 35e:	c6 01       	movw	r24, r12
 360:	b5 01       	movw	r22, r10
 362:	a8 01       	movw	r20, r16
 364:	97 01       	movw	r18, r14
 366:	54 d3       	rcall	.+1704   	; 0xa10 <__divsf3>
 368:	e6 2f       	mov	r30, r22
 36a:	69 2f       	mov	r22, r25
      return Rx; 
    }else{
      return 90000000.0; //90M - quasi unendlich
    }
  }
}
 36c:	2e 2f       	mov	r18, r30
 36e:	37 2f       	mov	r19, r23
 370:	48 2f       	mov	r20, r24
 372:	56 2f       	mov	r21, r22
 374:	b9 01       	movw	r22, r18
 376:	ca 01       	movw	r24, r20
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	9f 90       	pop	r9
 38e:	8f 90       	pop	r8
 390:	08 95       	ret

00000392 <rasterung>:

//--------------------------------------------------------
I32 rasterung(float r){
 392:	2f 92       	push	r2
 394:	3f 92       	push	r3
 396:	4f 92       	push	r4
 398:	5f 92       	push	r5
 39a:	6f 92       	push	r6
 39c:	7f 92       	push	r7
 39e:	8f 92       	push	r8
 3a0:	9f 92       	push	r9
 3a2:	af 92       	push	r10
 3a4:	bf 92       	push	r11
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	2b 97       	sbiw	r28, 0x0b	; 11
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	6a 83       	std	Y+2, r22	; 0x02
 3c8:	7b 83       	std	Y+3, r23	; 0x03
 3ca:	8c 83       	std	Y+4, r24	; 0x04
 3cc:	9d 83       	std	Y+5, r25	; 0x05
 3ce:	20 e8       	ldi	r18, 0x80	; 128
 3d0:	2e 83       	std	Y+6, r18	; 0x06
 3d2:	86 e9       	ldi	r24, 0x96	; 150
 3d4:	8f 83       	std	Y+7, r24	; 0x07
 3d6:	98 e1       	ldi	r25, 0x18	; 24
 3d8:	98 87       	std	Y+8, r25	; 0x08
 3da:	eb e4       	ldi	r30, 0x4B	; 75
 3dc:	e9 87       	std	Y+9, r30	; 0x09
 3de:	aa 24       	eor	r10, r10
 3e0:	bb 24       	eor	r11, r11
 3e2:	65 01       	movw	r12, r10
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	64 2e       	mov	r6, r20
 3e8:	71 2c       	mov	r7, r1
 3ea:	81 2c       	mov	r8, r1
 3ec:	91 2c       	mov	r9, r1
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	f9 83       	std	Y+1, r31	; 0x01
 3f2:	4a c0       	rjmp	.+148    	; 0x488 <__stack+0x29>
U8 i;

  m=1;
  for (dekade=1; dekade<7; dekade++){
    for (i=0; i<24; i++){
      val=e24[i] * m;
 3f4:	ea 85       	ldd	r30, Y+10	; 0x0a
 3f6:	fb 85       	ldd	r31, Y+11	; 0x0b
 3f8:	20 81       	ld	r18, Z
 3fa:	31 81       	ldd	r19, Z+1	; 0x01
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	c4 01       	movw	r24, r8
 402:	b3 01       	movw	r22, r6
 404:	b2 d4       	rcall	.+2404   	; 0xd6a <__mulsi3>
 406:	1b 01       	movw	r2, r22
 408:	2c 01       	movw	r4, r24
      diff = val - r;
 40a:	98 d3       	rcall	.+1840   	; 0xb3c <__floatsisf>
 40c:	2a 81       	ldd	r18, Y+2	; 0x02
 40e:	3b 81       	ldd	r19, Y+3	; 0x03
 410:	4c 81       	ldd	r20, Y+4	; 0x04
 412:	5d 81       	ldd	r21, Y+5	; 0x05
 414:	94 d2       	rcall	.+1320   	; 0x93e <__subsf3>
 416:	7b 01       	movw	r14, r22
 418:	8c 01       	movw	r16, r24
      if (diff<0) diff=0-diff;
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	f2 d2       	rcall	.+1508   	; 0xa08 <__cmpsf2>
 424:	88 23       	and	r24, r24
 426:	4c f4       	brge	.+18     	; 0x43a <rasterung+0xa8>
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	a8 01       	movw	r20, r16
 432:	97 01       	movw	r18, r14
 434:	84 d2       	rcall	.+1288   	; 0x93e <__subsf3>
 436:	7b 01       	movw	r14, r22
 438:	8c 01       	movw	r16, r24
      if (diff < diffmin){
 43a:	c8 01       	movw	r24, r16
 43c:	b7 01       	movw	r22, r14
 43e:	2e 81       	ldd	r18, Y+6	; 0x06
 440:	3f 81       	ldd	r19, Y+7	; 0x07
 442:	48 85       	ldd	r20, Y+8	; 0x08
 444:	59 85       	ldd	r21, Y+9	; 0x09
 446:	e0 d2       	rcall	.+1472   	; 0xa08 <__cmpsf2>
 448:	88 23       	and	r24, r24
 44a:	44 f4       	brge	.+16     	; 0x45c <rasterung+0xca>
 44c:	d8 01       	movw	r26, r16
 44e:	c7 01       	movw	r24, r14
 450:	ee 82       	std	Y+6, r14	; 0x06
 452:	9f 83       	std	Y+7, r25	; 0x07
 454:	a8 87       	std	Y+8, r26	; 0x08
 456:	b9 87       	std	Y+9, r27	; 0x09
 458:	62 01       	movw	r12, r4
 45a:	51 01       	movw	r10, r2
 45c:	8a 85       	ldd	r24, Y+10	; 0x0a
 45e:	9b 85       	ldd	r25, Y+11	; 0x0b
 460:	02 96       	adiw	r24, 0x02	; 2
 462:	9b 87       	std	Y+11, r25	; 0x0b
 464:	8a 87       	std	Y+10, r24	; 0x0a
U8 dekade;
U8 i;

  m=1;
  for (dekade=1; dekade<7; dekade++){
    for (i=0; i<24; i++){
 466:	89 5c       	subi	r24, 0xC9	; 201
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	21 f6       	brne	.-120    	; 0x3f4 <rasterung+0x62>
I32 rr=0;
U8 dekade;
U8 i;

  m=1;
  for (dekade=1; dekade<7; dekade++){
 46c:	f9 81       	ldd	r31, Y+1	; 0x01
 46e:	ff 5f       	subi	r31, 0xFF	; 255
 470:	f9 83       	std	Y+1, r31	; 0x01
 472:	f7 30       	cpi	r31, 0x07	; 7
 474:	71 f0       	breq	.+28     	; 0x492 <__stack+0x33>
      if (diff < diffmin){
        diffmin=diff;
        rr=val;
      }
    }
    m*=10;
 476:	c4 01       	movw	r24, r8
 478:	b3 01       	movw	r22, r6
 47a:	2a e0       	ldi	r18, 0x0A	; 10
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	73 d4       	rcall	.+2278   	; 0xd6a <__mulsi3>
 484:	3b 01       	movw	r6, r22
 486:	4c 01       	movw	r8, r24
 488:	89 e9       	ldi	r24, 0x99	; 153
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	9b 87       	std	Y+11, r25	; 0x0b
 48e:	8a 87       	std	Y+10, r24	; 0x0a
 490:	b1 cf       	rjmp	.-158    	; 0x3f4 <rasterung+0x62>
  }
  return rr;
}
 492:	b5 01       	movw	r22, r10
 494:	c6 01       	movw	r24, r12
 496:	2b 96       	adiw	r28, 0x0b	; 11
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	cf 91       	pop	r28
 4a4:	df 91       	pop	r29
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	bf 90       	pop	r11
 4b4:	af 90       	pop	r10
 4b6:	9f 90       	pop	r9
 4b8:	8f 90       	pop	r8
 4ba:	7f 90       	pop	r7
 4bc:	6f 90       	pop	r6
 4be:	5f 90       	pop	r5
 4c0:	4f 90       	pop	r4
 4c2:	3f 90       	pop	r3
 4c4:	2f 90       	pop	r2
 4c6:	08 95       	ret

000004c8 <__vector_9>:
    _delay_ms(60);
  }
}

//--------------------------------------------------------
ISR(TIMER0_OVF_vect){
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
//--------------------------------------------------------
  if (g_powerdown){
 4d6:	80 91 ca 00 	lds	r24, 0x00CA
 4da:	90 91 cb 00 	lds	r25, 0x00CB
 4de:	89 2b       	or	r24, r25
 4e0:	51 f0       	breq	.+20     	; 0x4f6 <__vector_9+0x2e>
    g_powerdown--;
 4e2:	80 91 ca 00 	lds	r24, 0x00CA
 4e6:	90 91 cb 00 	lds	r25, 0x00CB
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	90 93 cb 00 	sts	0x00CB, r25
 4f0:	80 93 ca 00 	sts	0x00CA, r24
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <__vector_9+0x30>
  }else{
    //PORTD|=BIT0; //HOLD auf H schaltet Spannungsregler ab
	PORTD &= ~(1 << PD0); //umgekehrte Logik
 4f6:	90 98       	cbi	0x12, 0	; 18
  }
}
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <displayResult>:
  }
  return rr;
}

//--------------------------------------------------------
void displayResult(float y){
 506:	2f 92       	push	r2
 508:	3f 92       	push	r3
 50a:	4f 92       	push	r4
 50c:	5f 92       	push	r5
 50e:	6f 92       	push	r6
 510:	7f 92       	push	r7
 512:	8f 92       	push	r8
 514:	9f 92       	push	r9
 516:	af 92       	push	r10
 518:	bf 92       	push	r11
 51a:	cf 92       	push	r12
 51c:	df 92       	push	r13
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	00 d0       	rcall	.+0      	; 0x52c <displayResult+0x26>
 52c:	00 d0       	rcall	.+0      	; 0x52e <displayResult+0x28>
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
 532:	5b 01       	movw	r10, r22
 534:	6c 01       	movw	r12, r24
U16 mult;
U8  dotpos;
float yy;
U8 cnt;

   if (y<10){
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e2       	ldi	r20, 0x20	; 32
 53c:	51 e4       	ldi	r21, 0x41	; 65
 53e:	64 d2       	rcall	.+1224   	; 0xa08 <__cmpsf2>
 540:	87 fd       	sbrc	r24, 7
 542:	09 c0       	rjmp	.+18     	; 0x556 <displayResult+0x50>
 544:	ea 2d       	mov	r30, r10
 546:	7b 2d       	mov	r23, r11
 548:	8c 2d       	mov	r24, r12
 54a:	6d 2d       	mov	r22, r13
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	3a 83       	std	Y+2, r19	; 0x02
 552:	29 83       	std	Y+1, r18	; 0x01
 554:	0d c0       	rjmp	.+26     	; 0x570 <displayResult+0x6a>
     yy = y*10;
 556:	c6 01       	movw	r24, r12
 558:	b5 01       	movw	r22, r10
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	40 e2       	ldi	r20, 0x20	; 32
 560:	51 e4       	ldi	r21, 0x41	; 65
 562:	a0 d3       	rcall	.+1856   	; 0xca4 <__mulsf3>
 564:	e6 2f       	mov	r30, r22
 566:	69 2f       	mov	r22, r25
 568:	aa e0       	ldi	r26, 0x0A	; 10
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	ba 83       	std	Y+2, r27	; 0x02
 56e:	a9 83       	std	Y+1, r26	; 0x01
   }else{
     yy=y;
     mult=1;
   }

   r=rasterung(yy);
 570:	2e 2f       	mov	r18, r30
 572:	37 2f       	mov	r19, r23
 574:	48 2f       	mov	r20, r24
 576:	56 2f       	mov	r21, r22
 578:	b9 01       	movw	r22, r18
 57a:	ca 01       	movw	r24, r20
 57c:	0a df       	rcall	.-492    	; 0x392 <rasterung>
 57e:	96 2e       	mov	r9, r22
 580:	87 2e       	mov	r8, r23
 582:	78 2e       	mov	r7, r24
 584:	69 2e       	mov	r6, r25
    1K   1K2     9K1
   10K 220K    910K         
    1M   4M7     9M1
*/
  //Reduzieren auf 4 signifikante Stellen
  if (y<10000000){//10M
 586:	c6 01       	movw	r24, r12
 588:	b5 01       	movw	r22, r10
 58a:	20 e8       	ldi	r18, 0x80	; 128
 58c:	36 e9       	ldi	r19, 0x96	; 150
 58e:	48 e1       	ldi	r20, 0x18	; 24
 590:	5b e4       	ldi	r21, 0x4B	; 75
 592:	3a d2       	rcall	.+1140   	; 0xa08 <__cmpsf2>
 594:	88 23       	and	r24, r24
 596:	0c f0       	brlt	.+2      	; 0x59a <displayResult+0x94>
 598:	4d c1       	rjmp	.+666    	; 0x834 <displayResult+0x32e>
   }else{
     yy=y;
     mult=1;
   }

   r=rasterung(yy);
 59a:	e9 2c       	mov	r14, r9
 59c:	f8 2c       	mov	r15, r8
 59e:	07 2d       	mov	r16, r7
 5a0:	16 2d       	mov	r17, r6
   10K 220K    910K         
    1M   4M7     9M1
*/
  //Reduzieren auf 4 signifikante Stellen
  if (y<10000000){//10M
    g_powerdown=360; //ca. 10,5s
 5a2:	88 e6       	ldi	r24, 0x68	; 104
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	90 93 cb 00 	sts	0x00CB, r25
 5aa:	80 93 ca 00 	sts	0x00CA, r24
    if (r>=1000000){ //1M
 5ae:	b0 e4       	ldi	r27, 0x40	; 64
 5b0:	eb 16       	cp	r14, r27
 5b2:	b2 e4       	ldi	r27, 0x42	; 66
 5b4:	fb 06       	cpc	r15, r27
 5b6:	bf e0       	ldi	r27, 0x0F	; 15
 5b8:	0b 07       	cpc	r16, r27
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	1b 07       	cpc	r17, r27
 5be:	c8 f0       	brcs	.+50     	; 0x5f2 <displayResult+0xec>
      c='M';
      num =r/1000000;  //1..9M
 5c0:	c8 01       	movw	r24, r16
 5c2:	b7 01       	movw	r22, r14
 5c4:	20 e4       	ldi	r18, 0x40	; 64
 5c6:	32 e4       	ldi	r19, 0x42	; 66
 5c8:	4f e0       	ldi	r20, 0x0F	; 15
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	ed d3       	rcall	.+2010   	; 0xda8 <__udivmodsi4>
 5ce:	49 01       	movw	r8, r18
      frac=r%1000000;  
      l=frac/100000;   //eine Nachkommastelle
 5d0:	c8 01       	movw	r24, r16
 5d2:	b7 01       	movw	r22, r14
 5d4:	20 e4       	ldi	r18, 0x40	; 64
 5d6:	32 e4       	ldi	r19, 0x42	; 66
 5d8:	4f e0       	ldi	r20, 0x0F	; 15
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	e5 d3       	rcall	.+1994   	; 0xda8 <__udivmodsi4>
 5de:	20 ea       	ldi	r18, 0xA0	; 160
 5e0:	36 e8       	ldi	r19, 0x86	; 134
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	e0 d3       	rcall	.+1984   	; 0xda8 <__udivmodsi4>
 5e8:	3c 83       	std	Y+4, r19	; 0x04
 5ea:	2b 83       	std	Y+3, r18	; 0x03
 5ec:	0d e4       	ldi	r16, 0x4D	; 77
 5ee:	50 2e       	mov	r5, r16
 5f0:	40 c0       	rjmp	.+128    	; 0x672 <displayResult+0x16c>
    }else    
    if (r>=1000){ //1K
 5f2:	e8 ee       	ldi	r30, 0xE8	; 232
 5f4:	ee 16       	cp	r14, r30
 5f6:	e3 e0       	ldi	r30, 0x03	; 3
 5f8:	fe 06       	cpc	r15, r30
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	0e 07       	cpc	r16, r30
 5fe:	e0 e0       	ldi	r30, 0x00	; 0
 600:	1e 07       	cpc	r17, r30
 602:	c8 f0       	brcs	.+50     	; 0x636 <displayResult+0x130>
      c='K';
      num=r/1000;
 604:	c8 01       	movw	r24, r16
 606:	b7 01       	movw	r22, r14
 608:	28 ee       	ldi	r18, 0xE8	; 232
 60a:	33 e0       	ldi	r19, 0x03	; 3
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	cb d3       	rcall	.+1942   	; 0xda8 <__udivmodsi4>
 612:	49 01       	movw	r8, r18
      frac=r%1000;
      l=frac/100;    //eine Nachkommastelle
 614:	c8 01       	movw	r24, r16
 616:	b7 01       	movw	r22, r14
 618:	28 ee       	ldi	r18, 0xE8	; 232
 61a:	33 e0       	ldi	r19, 0x03	; 3
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	c3 d3       	rcall	.+1926   	; 0xda8 <__udivmodsi4>
 622:	24 e6       	ldi	r18, 0x64	; 100
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	be d3       	rcall	.+1916   	; 0xda8 <__udivmodsi4>
 62c:	3c 83       	std	Y+4, r19	; 0x04
 62e:	2b 83       	std	Y+3, r18	; 0x03
 630:	1b e4       	ldi	r17, 0x4B	; 75
 632:	51 2e       	mov	r5, r17
 634:	1e c0       	rjmp	.+60     	; 0x672 <displayResult+0x16c>
    }else
    if (1==mult){ 
 636:	29 81       	ldd	r18, Y+1	; 0x01
 638:	3a 81       	ldd	r19, Y+2	; 0x02
 63a:	21 30       	cpi	r18, 0x01	; 1
 63c:	31 05       	cpc	r19, r1
 63e:	31 f4       	brne	.+12     	; 0x64c <displayResult+0x146>
      c='R';
      num=r;
 640:	47 01       	movw	r8, r14
 642:	b2 e5       	ldi	r27, 0x52	; 82
 644:	5b 2e       	mov	r5, r27
 646:	1c 82       	std	Y+4, r1	; 0x04
 648:	1b 82       	std	Y+3, r1	; 0x03
 64a:	13 c0       	rjmp	.+38     	; 0x672 <displayResult+0x16c>
      l=0;
    }else{//Mult ==10
      c='R';
      num=r/10;
 64c:	c8 01       	movw	r24, r16
 64e:	b7 01       	movw	r22, r14
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	a7 d3       	rcall	.+1870   	; 0xda8 <__udivmodsi4>
 65a:	49 01       	movw	r8, r18
      l=r%10;
 65c:	c8 01       	movw	r24, r16
 65e:	b7 01       	movw	r22, r14
 660:	2a e0       	ldi	r18, 0x0A	; 10
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	9f d3       	rcall	.+1854   	; 0xda8 <__udivmodsi4>
 66a:	7c 83       	std	Y+4, r23	; 0x04
 66c:	6b 83       	std	Y+3, r22	; 0x03
 66e:	a2 e5       	ldi	r26, 0x52	; 82
 670:	5a 2e       	mov	r5, r26
    }
    home1Lcd();
 672:	21 dd       	rcall	.-1470   	; 0xb6 <home1Lcd>
    lcdWrite(' ');
 674:	80 e2       	ldi	r24, 0x20	; 32
 676:	02 dd       	rcall	.-1532   	; 0x7c <lcdWrite>
   //-- schreibe Kurzform, z.B.  4K7 -------------
    n=num;
 678:	34 01       	movw	r6, r8
 67a:	88 24       	eor	r8, r8
 67c:	99 24       	eor	r9, r9
 67e:	22 24       	eor	r2, r2
 680:	23 94       	inc	r2
 682:	f4 e6       	ldi	r31, 0x64	; 100
 684:	ef 2e       	mov	r14, r31
 686:	f1 2c       	mov	r15, r1
 688:	01 2d       	mov	r16, r1
 68a:	11 2d       	mov	r17, r1
 68c:	44 24       	eor	r4, r4
    leading0 = 1;
    div=100;
    for (i=0; i<3; i++){
      z=n/div;
 68e:	c4 01       	movw	r24, r8
 690:	b3 01       	movw	r22, r6
 692:	a8 01       	movw	r20, r16
 694:	97 01       	movw	r18, r14
 696:	88 d3       	rcall	.+1808   	; 0xda8 <__udivmodsi4>
 698:	32 2e       	mov	r3, r18
      n%=div;
 69a:	c4 01       	movw	r24, r8
 69c:	b3 01       	movw	r22, r6
 69e:	a8 01       	movw	r20, r16
 6a0:	97 01       	movw	r18, r14
 6a2:	82 d3       	rcall	.+1796   	; 0xda8 <__udivmodsi4>
 6a4:	ac 01       	movw	r20, r24
 6a6:	cb 01       	movw	r24, r22
 6a8:	da 01       	movw	r26, r20
 6aa:	3c 01       	movw	r6, r24
 6ac:	4d 01       	movw	r8, r26
      div/=10;
 6ae:	c8 01       	movw	r24, r16
 6b0:	b7 01       	movw	r22, r14
 6b2:	2a e0       	ldi	r18, 0x0A	; 10
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	76 d3       	rcall	.+1772   	; 0xda8 <__udivmodsi4>
 6bc:	c9 01       	movw	r24, r18
 6be:	da 01       	movw	r26, r20
 6c0:	7c 01       	movw	r14, r24
 6c2:	8d 01       	movw	r16, r26
      if ((z>0) || (0==leading0)){
 6c4:	33 20       	and	r3, r3
 6c6:	11 f4       	brne	.+4      	; 0x6cc <displayResult+0x1c6>
 6c8:	22 20       	and	r2, r2
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <displayResult+0x1ce>
        lcdWrite9(z);
 6cc:	83 2d       	mov	r24, r3
 6ce:	e2 dc       	rcall	.-1596   	; 0x94 <lcdWrite9>
 6d0:	22 24       	eor	r2, r2
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <displayResult+0x1d2>
        leading0=0;
      }else{
        lcdWrite(' ');
 6d4:	80 e2       	ldi	r24, 0x20	; 32
 6d6:	d2 dc       	rcall	.-1628   	; 0x7c <lcdWrite>
    lcdWrite(' ');
   //-- schreibe Kurzform, z.B.  4K7 -------------
    n=num;
    leading0 = 1;
    div=100;
    for (i=0; i<3; i++){
 6d8:	43 94       	inc	r4
 6da:	33 e0       	ldi	r19, 0x03	; 3
 6dc:	43 16       	cp	r4, r19
 6de:	b9 f6       	brne	.-82     	; 0x68e <displayResult+0x188>
        leading0=0;
      }else{
        lcdWrite(' ');
      }
    }
    lcdWrite(c);
 6e0:	85 2d       	mov	r24, r5
 6e2:	cc dc       	rcall	.-1640   	; 0x7c <lcdWrite>
    if (l>0){
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	9c 81       	ldd	r25, Y+4	; 0x04
 6e8:	89 2b       	or	r24, r25
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <displayResult+0x1ec>
      lcdWrite9(l);
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	d2 dc       	rcall	.-1628   	; 0x94 <lcdWrite9>
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <displayResult+0x1f0>
    }else{
      lcdWrite(' ');
 6f2:	80 e2       	ldi	r24, 0x20	; 32
 6f4:	c3 dc       	rcall	.-1658   	; 0x7c <lcdWrite>
    }

    home2Lcd();
 6f6:	e2 dc       	rcall	.-1596   	; 0xbc <home2Lcd>
    

   //-- schreibe Messwert, z.B.  4697 -------------

    if (y<10){
 6f8:	c6 01       	movw	r24, r12
 6fa:	b5 01       	movw	r22, r10
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	40 e2       	ldi	r20, 0x20	; 32
 702:	51 e4       	ldi	r21, 0x41	; 65
 704:	81 d1       	rcall	.+770    	; 0xa08 <__cmpsf2>
 706:	88 23       	and	r24, r24
 708:	7c f4       	brge	.+30     	; 0x728 <displayResult+0x222>
      n=y*100;
 70a:	c6 01       	movw	r24, r12
 70c:	b5 01       	movw	r22, r10
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	48 ec       	ldi	r20, 0xC8	; 200
 714:	52 e4       	ldi	r21, 0x42	; 66
 716:	c6 d2       	rcall	.+1420   	; 0xca4 <__mulsf3>
 718:	e3 d1       	rcall	.+966    	; 0xae0 <__fixunssfsi>
 71a:	56 2e       	mov	r5, r22
 71c:	67 2e       	mov	r6, r23
 71e:	78 2e       	mov	r7, r24
 720:	89 2e       	mov	r8, r25
 722:	e5 e0       	ldi	r30, 0x05	; 5
 724:	4e 2e       	mov	r4, r30
 726:	21 c0       	rjmp	.+66     	; 0x76a <displayResult+0x264>
      dotpos=5;
    }else
    if (y<100){
 728:	c6 01       	movw	r24, r12
 72a:	b5 01       	movw	r22, r10
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	48 ec       	ldi	r20, 0xC8	; 200
 732:	52 e4       	ldi	r21, 0x42	; 66
 734:	69 d1       	rcall	.+722    	; 0xa08 <__cmpsf2>
 736:	88 23       	and	r24, r24
 738:	7c f4       	brge	.+30     	; 0x758 <displayResult+0x252>
      n=y*10;
 73a:	c6 01       	movw	r24, r12
 73c:	b5 01       	movw	r22, r10
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	40 e2       	ldi	r20, 0x20	; 32
 744:	51 e4       	ldi	r21, 0x41	; 65
 746:	ae d2       	rcall	.+1372   	; 0xca4 <__mulsf3>
 748:	cb d1       	rcall	.+918    	; 0xae0 <__fixunssfsi>
 74a:	56 2e       	mov	r5, r22
 74c:	67 2e       	mov	r6, r23
 74e:	78 2e       	mov	r7, r24
 750:	89 2e       	mov	r8, r25
 752:	76 e0       	ldi	r23, 0x06	; 6
 754:	47 2e       	mov	r4, r23
 756:	09 c0       	rjmp	.+18     	; 0x76a <displayResult+0x264>
      dotpos=6;
    }else{
      n=y;
 758:	c6 01       	movw	r24, r12
 75a:	b5 01       	movw	r22, r10
 75c:	c1 d1       	rcall	.+898    	; 0xae0 <__fixunssfsi>
 75e:	56 2e       	mov	r5, r22
 760:	67 2e       	mov	r6, r23
 762:	78 2e       	mov	r7, r24
 764:	89 2e       	mov	r8, r25
 766:	67 e0       	ldi	r22, 0x07	; 7
 768:	46 2e       	mov	r4, r22
 76a:	cc 24       	eor	r12, r12
 76c:	c3 94       	inc	r12
 76e:	50 e4       	ldi	r21, 0x40	; 64
 770:	e5 2e       	mov	r14, r21
 772:	52 e4       	ldi	r21, 0x42	; 66
 774:	f5 2e       	mov	r15, r21
 776:	5f e0       	ldi	r21, 0x0F	; 15
 778:	05 2f       	mov	r16, r21
 77a:	11 2d       	mov	r17, r1
 77c:	dd 24       	eor	r13, r13
 77e:	22 24       	eor	r2, r2
 780:	33 24       	eor	r3, r3
    for (i=0; i<7; i++){
      if (dotpos==i) lcdWrite(',');
      z=n/div;
      n%=div;
      div/=10;
      if ((z>0) || (0==leading0) ||(i>=(dotpos-1))){
 782:	a4 2c       	mov	r10, r4
 784:	bb 24       	eor	r11, r11
 786:	08 94       	sec
 788:	a1 08       	sbc	r10, r1
 78a:	b1 08       	sbc	r11, r1
    }else
    if (y<100){
      n=y*10;
      dotpos=6;
    }else{
      n=y;
 78c:	92 2c       	mov	r9, r2
    }
    leading0 = 1;
    div=1000000;
    cnt=0;
    for (i=0; i<7; i++){
      if (dotpos==i) lcdWrite(',');
 78e:	42 14       	cp	r4, r2
 790:	11 f4       	brne	.+4      	; 0x796 <displayResult+0x290>
 792:	8c e2       	ldi	r24, 0x2C	; 44
 794:	73 dc       	rcall	.-1818   	; 0x7c <lcdWrite>
      z=n/div;
 796:	65 2d       	mov	r22, r5
 798:	76 2d       	mov	r23, r6
 79a:	87 2d       	mov	r24, r7
 79c:	98 2d       	mov	r25, r8
 79e:	a8 01       	movw	r20, r16
 7a0:	97 01       	movw	r18, r14
 7a2:	02 d3       	rcall	.+1540   	; 0xda8 <__udivmodsi4>
      n%=div;
      div/=10;
      if ((z>0) || (0==leading0) ||(i>=(dotpos-1))){
 7a4:	22 23       	and	r18, r18
 7a6:	29 f4       	brne	.+10     	; 0x7b2 <displayResult+0x2ac>
 7a8:	cc 20       	and	r12, r12
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <displayResult+0x2ac>
 7ac:	2a 14       	cp	r2, r10
 7ae:	3b 04       	cpc	r3, r11
 7b0:	64 f0       	brlt	.+24     	; 0x7ca <displayResult+0x2c4>
        if (cnt++ < 4){ //Nur 4 signifikante Stellen
 7b2:	9d 2c       	mov	r9, r13
 7b4:	93 94       	inc	r9
 7b6:	93 e0       	ldi	r25, 0x03	; 3
 7b8:	9d 15       	cp	r25, r13
 7ba:	18 f0       	brcs	.+6      	; 0x7c2 <displayResult+0x2bc>
          lcdWrite9(z);
 7bc:	82 2f       	mov	r24, r18
 7be:	6a dc       	rcall	.-1836   	; 0x94 <lcdWrite9>
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <displayResult+0x2c0>
        }else{
          lcdWrite('0');
 7c2:	80 e3       	ldi	r24, 0x30	; 48
 7c4:	5b dc       	rcall	.-1866   	; 0x7c <lcdWrite>
 7c6:	cc 24       	eor	r12, r12
 7c8:	0c c0       	rjmp	.+24     	; 0x7e2 <displayResult+0x2dc>
        }
        leading0=0;
      }else{
        if ((1==mult) || (i>1)) lcdWrite(' ');
 7ca:	a9 81       	ldd	r26, Y+1	; 0x01
 7cc:	ba 81       	ldd	r27, Y+2	; 0x02
 7ce:	11 97       	sbiw	r26, 0x01	; 1
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <displayResult+0x2d2>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	b9 15       	cp	r27, r9
 7d6:	10 f4       	brcc	.+4      	; 0x7dc <displayResult+0x2d6>
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	50 dc       	rcall	.-1888   	; 0x7c <lcdWrite>
 7dc:	9d 2c       	mov	r9, r13
 7de:	cc 24       	eor	r12, r12
 7e0:	c3 94       	inc	r12
 7e2:	08 94       	sec
 7e4:	21 1c       	adc	r2, r1
 7e6:	31 1c       	adc	r3, r1
      dotpos=7;
    }
    leading0 = 1;
    div=1000000;
    cnt=0;
    for (i=0; i<7; i++){
 7e8:	e7 e0       	ldi	r30, 0x07	; 7
 7ea:	2e 16       	cp	r2, r30
 7ec:	31 04       	cpc	r3, r1
 7ee:	c1 f0       	breq	.+48     	; 0x820 <displayResult+0x31a>
      if (dotpos==i) lcdWrite(',');
      z=n/div;
      n%=div;
 7f0:	65 2d       	mov	r22, r5
 7f2:	76 2d       	mov	r23, r6
 7f4:	87 2d       	mov	r24, r7
 7f6:	98 2d       	mov	r25, r8
 7f8:	a8 01       	movw	r20, r16
 7fa:	97 01       	movw	r18, r14
 7fc:	d5 d2       	rcall	.+1450   	; 0xda8 <__udivmodsi4>
 7fe:	56 2e       	mov	r5, r22
 800:	67 2e       	mov	r6, r23
 802:	78 2e       	mov	r7, r24
 804:	89 2e       	mov	r8, r25
      div/=10;
 806:	c8 01       	movw	r24, r16
 808:	b7 01       	movw	r22, r14
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	ca d2       	rcall	.+1428   	; 0xda8 <__udivmodsi4>
 814:	c9 01       	movw	r24, r18
 816:	da 01       	movw	r26, r20
 818:	7c 01       	movw	r14, r24
 81a:	8d 01       	movw	r16, r26
 81c:	d9 2c       	mov	r13, r9
 81e:	b6 cf       	rjmp	.-148    	; 0x78c <displayResult+0x286>
 820:	8c ed       	ldi	r24, 0xDC	; 220
 822:	95 e0       	ldi	r25, 0x05	; 5
 824:	28 ec       	ldi	r18, 0xC8	; 200
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	f9 01       	movw	r30, r18
 82a:	31 97       	sbiw	r30, 0x01	; 1
 82c:	f1 f7       	brne	.-4      	; 0x82a <displayResult+0x324>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 82e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 830:	d9 f7       	brne	.-10     	; 0x828 <displayResult+0x322>
 832:	14 c0       	rjmp	.+40     	; 0x85c <displayResult+0x356>
        if ((1==mult) || (i>1)) lcdWrite(' ');
      }
    }
    _delay_ms(150);
  }else{
    if (36==g_powerdown) lcdInit();
 834:	80 91 ca 00 	lds	r24, 0x00CA
 838:	90 91 cb 00 	lds	r25, 0x00CB
 83c:	84 97       	sbiw	r24, 0x24	; 36
 83e:	09 f4       	brne	.+2      	; 0x842 <displayResult+0x33c>
 840:	40 dc       	rcall	.-1920   	; 0xc2 <lcdInit>
    clearLcd();
 842:	36 dc       	rcall	.-1940   	; 0xb0 <clearLcd>
                        //12345678
    sendStringToLCD((U8*)"  ---");
 844:	80 e6       	ldi	r24, 0x60	; 96
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	79 dc       	rcall	.-1806   	; 0x13c <sendStringToLCD>
 84a:	88 e5       	ldi	r24, 0x58	; 88
 84c:	92 e0       	ldi	r25, 0x02	; 2
 84e:	28 ec       	ldi	r18, 0xC8	; 200
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	f9 01       	movw	r30, r18
 854:	31 97       	sbiw	r30, 0x01	; 1
 856:	f1 f7       	brne	.-4      	; 0x854 <displayResult+0x34e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 858:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 85a:	d9 f7       	brne	.-10     	; 0x852 <displayResult+0x34c>
    _delay_ms(60);
  }
}
 85c:	0f 90       	pop	r0
 85e:	0f 90       	pop	r0
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	cf 91       	pop	r28
 866:	df 91       	pop	r29
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	df 90       	pop	r13
 872:	cf 90       	pop	r12
 874:	bf 90       	pop	r11
 876:	af 90       	pop	r10
 878:	9f 90       	pop	r9
 87a:	8f 90       	pop	r8
 87c:	7f 90       	pop	r7
 87e:	6f 90       	pop	r6
 880:	5f 90       	pop	r5
 882:	4f 90       	pop	r4
 884:	3f 90       	pop	r3
 886:	2f 90       	pop	r2
 888:	08 95       	ret

0000088a <main>:
	PORTD &= ~(1 << PD0); //umgekehrte Logik
  }
}

//--------------------------------------------------------
int main(void){
 88a:	df 92       	push	r13
 88c:	ef 92       	push	r14
 88e:	ff 92       	push	r15
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
float bestRx=99000111; //99M

U16 inaccuracy_min;
U8 i;

  DDRB= BIT0| BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6;
 898:	8f e7       	ldi	r24, 0x7F	; 127
 89a:	87 bb       	out	0x17, r24	; 23
  DDRC= 0;
 89c:	14 ba       	out	0x14, r1	; 20
  DDRD= BIT0| BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7;
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	81 bb       	out	0x11, r24	; 17

  //PORTD=0; //HOLD fuer den TLE4267 auf GND
  PORTD |= (1 << PD0);   //HOLD auf H schaltet
 8a2:	90 9a       	sbi	0x12, 0	; 18
  TCCR0B = (1<<CS02)|(1<<CS00); //1MHz/1024=976Hz
  TIMSK0 = (1<<TOIE0); //Timer overflow every 262ms (3.81Hz) 
 */

  // ADC at 125KHz, 
  ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);  // 8MHz/64
 8a4:	86 e8       	ldi	r24, 0x86	; 134
 8a6:	86 b9       	out	0x06, r24	; 6
  //ADCSRB = 0; //Free running 		
  SFIOR=(0<<ACME);
 8a8:	10 be       	out	0x30, r1	; 48
  ADMUX = (1<<REFS0)|14; //Uref= Vcc. Channel 14: 
 8aa:	8e e4       	ldi	r24, 0x4E	; 78
 8ac:	87 b9       	out	0x07, r24	; 7
  //DIDR0 = BIT0|BIT1|BIT2|BIT3|BIT4|BIT5; //Digital inputs disabled
 



  TCCR0 = 0; 
 8ae:	13 be       	out	0x33, r1	; 51
  TCCR0 = (1<<CS02)|(1<<CS00); //1MHz/1024=976Hz
 8b0:	85 e0       	ldi	r24, 0x05	; 5
 8b2:	83 bf       	out	0x33, r24	; 51
  TIMSK = (1<<TOIE0); //Timer overflow every 262ms (3.81Hz) 
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	89 bf       	out	0x39, r24	; 57
  
      
     
  g_powerdown=40; //ca. 10,5s
 8b8:	88 e2       	ldi	r24, 0x28	; 40
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	90 93 cb 00 	sts	0x00CB, r25
 8c0:	80 93 ca 00 	sts	0x00CA, r24
  g_powerdown=360; //ca. 10,5s
 8c4:	88 e6       	ldi	r24, 0x68	; 104
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	90 93 cb 00 	sts	0x00CB, r25
 8cc:	80 93 ca 00 	sts	0x00CA, r24
  
  lcdInit();
 8d0:	f8 db       	rcall	.-2064   	; 0xc2 <lcdInit>
  sei();  //Interrupts an
 8d2:	78 94       	sei
  //Messe Versorgungsspannung bis mind. 4.8V erreicht
  // Bei 4,8V=Uref liefert der ADC 1,1/4,8*1023*32=7502 
  // Bei 4,9V=Uref liefert der ADC 1,1/4,9*1023*32=7348 
  // Bei 5.0V=Uref liefert der ADC 1,1/5,0*1023*32=7201
  
   if (getAdc() > 8870){
 8d4:	4b dc       	rcall	.-1898   	; 0x16c <getAdc>
 8d6:	87 5a       	subi	r24, 0xA7	; 167
 8d8:	92 42       	sbci	r25, 0x22	; 34
 8da:	18 f0       	brcs	.+6      	; 0x8e2 <main+0x58>
    sendStringToLCD((U8*)"Low Batt");
 8dc:	86 e6       	ldi	r24, 0x66	; 102
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	2d dc       	rcall	.-1958   	; 0x13c <sendStringToLCD>
  }
  //Falls 4.8V nicht erreicht werden, schaltet der Timer nach 10s ab.
  while (getAdc() > 8870)
 8e2:	44 dc       	rcall	.-1912   	; 0x16c <getAdc>
 8e4:	87 5a       	subi	r24, 0xA7	; 167
 8e6:	92 42       	sbci	r25, 0x22	; 34
 8e8:	e0 f7       	brcc	.-8      	; 0x8e2 <main+0x58>
  ; //Do nothing  - wait for power

  lcdInit(); //Nochmal initialisieren, da jetzt erst die Versorgungssannung optimal ist
 8ea:	eb db       	rcall	.-2090   	; 0xc2 <lcdInit>
 8ec:	26 ee       	ldi	r18, 0xE6	; 230
 8ee:	d2 2e       	mov	r13, r18
 8f0:	93 ed       	ldi	r25, 0xD3	; 211
 8f2:	e9 2e       	mov	r14, r25
 8f4:	8c eb       	ldi	r24, 0xBC	; 188
 8f6:	f8 2e       	mov	r15, r24
 8f8:	0c e4       	ldi	r16, 0x4C	; 76
 8fa:	cf ef       	ldi	r28, 0xFF	; 255
 8fc:	df ef       	ldi	r29, 0xFF	; 255
 8fe:	10 e0       	ldi	r17, 0x00	; 0
 900:	11 c0       	rjmp	.+34     	; 0x924 <main+0x9a>
  */

  while(1){
    inaccuracy_min = 0xffff;
    for (i=0; i<8; i++){
      Rx = measureRx(i);
 902:	81 2f       	mov	r24, r17
 904:	52 dc       	rcall	.-1884   	; 0x1aa <measureRx>
      if (g_inaccuracy <= inaccuracy_min){
 906:	20 91 cc 00 	lds	r18, 0x00CC
 90a:	30 91 cd 00 	lds	r19, 0x00CD
 90e:	c2 17       	cp	r28, r18
 910:	d3 07       	cpc	r29, r19
 912:	10 f4       	brcc	.+4      	; 0x918 <main+0x8e>
 914:	9e 01       	movw	r18, r28
 916:	04 c0       	rjmp	.+8      	; 0x920 <main+0x96>
 918:	d6 2e       	mov	r13, r22
 91a:	e7 2e       	mov	r14, r23
 91c:	f8 2e       	mov	r15, r24
 91e:	09 2f       	mov	r16, r25

  */

  while(1){
    inaccuracy_min = 0xffff;
    for (i=0; i<8; i++){
 920:	1f 5f       	subi	r17, 0xFF	; 255
 922:	e9 01       	movw	r28, r18
 924:	18 30       	cpi	r17, 0x08	; 8
 926:	68 f3       	brcs	.-38     	; 0x902 <main+0x78>
      if (g_inaccuracy <= inaccuracy_min){
        inaccuracy_min = g_inaccuracy;
        bestRx = Rx;
      }
    }
    displayResult(bestRx);
 928:	2d 2d       	mov	r18, r13
 92a:	3e 2d       	mov	r19, r14
 92c:	4f 2d       	mov	r20, r15
 92e:	50 2f       	mov	r21, r16
 930:	b9 01       	movw	r22, r18
 932:	ca 01       	movw	r24, r20
 934:	e8 dd       	rcall	.-1072   	; 0x506 <displayResult>
 936:	cf ef       	ldi	r28, 0xFF	; 255
 938:	df ef       	ldi	r29, 0xFF	; 255
 93a:	10 e0       	ldi	r17, 0x00	; 0
 93c:	e2 cf       	rjmp	.-60     	; 0x902 <main+0x78>

0000093e <__subsf3>:
 93e:	50 58       	subi	r21, 0x80	; 128

00000940 <__addsf3>:
 940:	bb 27       	eor	r27, r27
 942:	aa 27       	eor	r26, r26
 944:	0e d0       	rcall	.+28     	; 0x962 <__addsf3x>
 946:	70 c1       	rjmp	.+736    	; 0xc28 <__fp_round>
 948:	61 d1       	rcall	.+706    	; 0xc0c <__fp_pscA>
 94a:	30 f0       	brcs	.+12     	; 0x958 <__addsf3+0x18>
 94c:	66 d1       	rcall	.+716    	; 0xc1a <__fp_pscB>
 94e:	20 f0       	brcs	.+8      	; 0x958 <__addsf3+0x18>
 950:	31 f4       	brne	.+12     	; 0x95e <__addsf3+0x1e>
 952:	9f 3f       	cpi	r25, 0xFF	; 255
 954:	11 f4       	brne	.+4      	; 0x95a <__addsf3+0x1a>
 956:	1e f4       	brtc	.+6      	; 0x95e <__addsf3+0x1e>
 958:	56 c1       	rjmp	.+684    	; 0xc06 <__fp_nan>
 95a:	0e f4       	brtc	.+2      	; 0x95e <__addsf3+0x1e>
 95c:	e0 95       	com	r30
 95e:	e7 fb       	bst	r30, 7
 960:	4c c1       	rjmp	.+664    	; 0xbfa <__fp_inf>

00000962 <__addsf3x>:
 962:	e9 2f       	mov	r30, r25
 964:	72 d1       	rcall	.+740    	; 0xc4a <__fp_split3>
 966:	80 f3       	brcs	.-32     	; 0x948 <__addsf3+0x8>
 968:	ba 17       	cp	r27, r26
 96a:	62 07       	cpc	r22, r18
 96c:	73 07       	cpc	r23, r19
 96e:	84 07       	cpc	r24, r20
 970:	95 07       	cpc	r25, r21
 972:	18 f0       	brcs	.+6      	; 0x97a <__addsf3x+0x18>
 974:	71 f4       	brne	.+28     	; 0x992 <__addsf3x+0x30>
 976:	9e f5       	brtc	.+102    	; 0x9de <__addsf3x+0x7c>
 978:	8a c1       	rjmp	.+788    	; 0xc8e <__fp_zero>
 97a:	0e f4       	brtc	.+2      	; 0x97e <__addsf3x+0x1c>
 97c:	e0 95       	com	r30
 97e:	0b 2e       	mov	r0, r27
 980:	ba 2f       	mov	r27, r26
 982:	a0 2d       	mov	r26, r0
 984:	0b 01       	movw	r0, r22
 986:	b9 01       	movw	r22, r18
 988:	90 01       	movw	r18, r0
 98a:	0c 01       	movw	r0, r24
 98c:	ca 01       	movw	r24, r20
 98e:	a0 01       	movw	r20, r0
 990:	11 24       	eor	r1, r1
 992:	ff 27       	eor	r31, r31
 994:	59 1b       	sub	r21, r25
 996:	99 f0       	breq	.+38     	; 0x9be <__addsf3x+0x5c>
 998:	59 3f       	cpi	r21, 0xF9	; 249
 99a:	50 f4       	brcc	.+20     	; 0x9b0 <__addsf3x+0x4e>
 99c:	50 3e       	cpi	r21, 0xE0	; 224
 99e:	68 f1       	brcs	.+90     	; 0x9fa <__addsf3x+0x98>
 9a0:	1a 16       	cp	r1, r26
 9a2:	f0 40       	sbci	r31, 0x00	; 0
 9a4:	a2 2f       	mov	r26, r18
 9a6:	23 2f       	mov	r18, r19
 9a8:	34 2f       	mov	r19, r20
 9aa:	44 27       	eor	r20, r20
 9ac:	58 5f       	subi	r21, 0xF8	; 248
 9ae:	f3 cf       	rjmp	.-26     	; 0x996 <__addsf3x+0x34>
 9b0:	46 95       	lsr	r20
 9b2:	37 95       	ror	r19
 9b4:	27 95       	ror	r18
 9b6:	a7 95       	ror	r26
 9b8:	f0 40       	sbci	r31, 0x00	; 0
 9ba:	53 95       	inc	r21
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__addsf3x+0x4e>
 9be:	7e f4       	brtc	.+30     	; 0x9de <__addsf3x+0x7c>
 9c0:	1f 16       	cp	r1, r31
 9c2:	ba 0b       	sbc	r27, r26
 9c4:	62 0b       	sbc	r22, r18
 9c6:	73 0b       	sbc	r23, r19
 9c8:	84 0b       	sbc	r24, r20
 9ca:	ba f0       	brmi	.+46     	; 0x9fa <__addsf3x+0x98>
 9cc:	91 50       	subi	r25, 0x01	; 1
 9ce:	a1 f0       	breq	.+40     	; 0x9f8 <__addsf3x+0x96>
 9d0:	ff 0f       	add	r31, r31
 9d2:	bb 1f       	adc	r27, r27
 9d4:	66 1f       	adc	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	c2 f7       	brpl	.-16     	; 0x9cc <__addsf3x+0x6a>
 9dc:	0e c0       	rjmp	.+28     	; 0x9fa <__addsf3x+0x98>
 9de:	ba 0f       	add	r27, r26
 9e0:	62 1f       	adc	r22, r18
 9e2:	73 1f       	adc	r23, r19
 9e4:	84 1f       	adc	r24, r20
 9e6:	48 f4       	brcc	.+18     	; 0x9fa <__addsf3x+0x98>
 9e8:	87 95       	ror	r24
 9ea:	77 95       	ror	r23
 9ec:	67 95       	ror	r22
 9ee:	b7 95       	ror	r27
 9f0:	f7 95       	ror	r31
 9f2:	9e 3f       	cpi	r25, 0xFE	; 254
 9f4:	08 f0       	brcs	.+2      	; 0x9f8 <__addsf3x+0x96>
 9f6:	b3 cf       	rjmp	.-154    	; 0x95e <__addsf3+0x1e>
 9f8:	93 95       	inc	r25
 9fa:	88 0f       	add	r24, r24
 9fc:	08 f0       	brcs	.+2      	; 0xa00 <__addsf3x+0x9e>
 9fe:	99 27       	eor	r25, r25
 a00:	ee 0f       	add	r30, r30
 a02:	97 95       	ror	r25
 a04:	87 95       	ror	r24
 a06:	08 95       	ret

00000a08 <__cmpsf2>:
 a08:	d4 d0       	rcall	.+424    	; 0xbb2 <__fp_cmp>
 a0a:	08 f4       	brcc	.+2      	; 0xa0e <__cmpsf2+0x6>
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	08 95       	ret

00000a10 <__divsf3>:
 a10:	0c d0       	rcall	.+24     	; 0xa2a <__divsf3x>
 a12:	0a c1       	rjmp	.+532    	; 0xc28 <__fp_round>
 a14:	02 d1       	rcall	.+516    	; 0xc1a <__fp_pscB>
 a16:	40 f0       	brcs	.+16     	; 0xa28 <__divsf3+0x18>
 a18:	f9 d0       	rcall	.+498    	; 0xc0c <__fp_pscA>
 a1a:	30 f0       	brcs	.+12     	; 0xa28 <__divsf3+0x18>
 a1c:	21 f4       	brne	.+8      	; 0xa26 <__divsf3+0x16>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	19 f0       	breq	.+6      	; 0xa28 <__divsf3+0x18>
 a22:	eb c0       	rjmp	.+470    	; 0xbfa <__fp_inf>
 a24:	51 11       	cpse	r21, r1
 a26:	34 c1       	rjmp	.+616    	; 0xc90 <__fp_szero>
 a28:	ee c0       	rjmp	.+476    	; 0xc06 <__fp_nan>

00000a2a <__divsf3x>:
 a2a:	0f d1       	rcall	.+542    	; 0xc4a <__fp_split3>
 a2c:	98 f3       	brcs	.-26     	; 0xa14 <__divsf3+0x4>

00000a2e <__divsf3_pse>:
 a2e:	99 23       	and	r25, r25
 a30:	c9 f3       	breq	.-14     	; 0xa24 <__divsf3+0x14>
 a32:	55 23       	and	r21, r21
 a34:	b1 f3       	breq	.-20     	; 0xa22 <__divsf3+0x12>
 a36:	95 1b       	sub	r25, r21
 a38:	55 0b       	sbc	r21, r21
 a3a:	bb 27       	eor	r27, r27
 a3c:	aa 27       	eor	r26, r26
 a3e:	62 17       	cp	r22, r18
 a40:	73 07       	cpc	r23, r19
 a42:	84 07       	cpc	r24, r20
 a44:	38 f0       	brcs	.+14     	; 0xa54 <__divsf3_pse+0x26>
 a46:	9f 5f       	subi	r25, 0xFF	; 255
 a48:	5f 4f       	sbci	r21, 0xFF	; 255
 a4a:	22 0f       	add	r18, r18
 a4c:	33 1f       	adc	r19, r19
 a4e:	44 1f       	adc	r20, r20
 a50:	aa 1f       	adc	r26, r26
 a52:	a9 f3       	breq	.-22     	; 0xa3e <__divsf3_pse+0x10>
 a54:	33 d0       	rcall	.+102    	; 0xabc <__divsf3_pse+0x8e>
 a56:	0e 2e       	mov	r0, r30
 a58:	3a f0       	brmi	.+14     	; 0xa68 <__divsf3_pse+0x3a>
 a5a:	e0 e8       	ldi	r30, 0x80	; 128
 a5c:	30 d0       	rcall	.+96     	; 0xabe <__divsf3_pse+0x90>
 a5e:	91 50       	subi	r25, 0x01	; 1
 a60:	50 40       	sbci	r21, 0x00	; 0
 a62:	e6 95       	lsr	r30
 a64:	00 1c       	adc	r0, r0
 a66:	ca f7       	brpl	.-14     	; 0xa5a <__divsf3_pse+0x2c>
 a68:	29 d0       	rcall	.+82     	; 0xabc <__divsf3_pse+0x8e>
 a6a:	fe 2f       	mov	r31, r30
 a6c:	27 d0       	rcall	.+78     	; 0xabc <__divsf3_pse+0x8e>
 a6e:	66 0f       	add	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	bb 1f       	adc	r27, r27
 a76:	26 17       	cp	r18, r22
 a78:	37 07       	cpc	r19, r23
 a7a:	48 07       	cpc	r20, r24
 a7c:	ab 07       	cpc	r26, r27
 a7e:	b0 e8       	ldi	r27, 0x80	; 128
 a80:	09 f0       	breq	.+2      	; 0xa84 <__divsf3_pse+0x56>
 a82:	bb 0b       	sbc	r27, r27
 a84:	80 2d       	mov	r24, r0
 a86:	bf 01       	movw	r22, r30
 a88:	ff 27       	eor	r31, r31
 a8a:	93 58       	subi	r25, 0x83	; 131
 a8c:	5f 4f       	sbci	r21, 0xFF	; 255
 a8e:	2a f0       	brmi	.+10     	; 0xa9a <__divsf3_pse+0x6c>
 a90:	9e 3f       	cpi	r25, 0xFE	; 254
 a92:	51 05       	cpc	r21, r1
 a94:	68 f0       	brcs	.+26     	; 0xab0 <__divsf3_pse+0x82>
 a96:	b1 c0       	rjmp	.+354    	; 0xbfa <__fp_inf>
 a98:	fb c0       	rjmp	.+502    	; 0xc90 <__fp_szero>
 a9a:	5f 3f       	cpi	r21, 0xFF	; 255
 a9c:	ec f3       	brlt	.-6      	; 0xa98 <__divsf3_pse+0x6a>
 a9e:	98 3e       	cpi	r25, 0xE8	; 232
 aa0:	dc f3       	brlt	.-10     	; 0xa98 <__divsf3_pse+0x6a>
 aa2:	86 95       	lsr	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	b7 95       	ror	r27
 aaa:	f7 95       	ror	r31
 aac:	9f 5f       	subi	r25, 0xFF	; 255
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__divsf3_pse+0x74>
 ab0:	88 0f       	add	r24, r24
 ab2:	91 1d       	adc	r25, r1
 ab4:	96 95       	lsr	r25
 ab6:	87 95       	ror	r24
 ab8:	97 f9       	bld	r25, 7
 aba:	08 95       	ret
 abc:	e1 e0       	ldi	r30, 0x01	; 1
 abe:	66 0f       	add	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	bb 1f       	adc	r27, r27
 ac6:	62 17       	cp	r22, r18
 ac8:	73 07       	cpc	r23, r19
 aca:	84 07       	cpc	r24, r20
 acc:	ba 07       	cpc	r27, r26
 ace:	20 f0       	brcs	.+8      	; 0xad8 <__divsf3_pse+0xaa>
 ad0:	62 1b       	sub	r22, r18
 ad2:	73 0b       	sbc	r23, r19
 ad4:	84 0b       	sbc	r24, r20
 ad6:	ba 0b       	sbc	r27, r26
 ad8:	ee 1f       	adc	r30, r30
 ada:	88 f7       	brcc	.-30     	; 0xabe <__divsf3_pse+0x90>
 adc:	e0 95       	com	r30
 ade:	08 95       	ret

00000ae0 <__fixunssfsi>:
 ae0:	bc d0       	rcall	.+376    	; 0xc5a <__fp_splitA>
 ae2:	88 f0       	brcs	.+34     	; 0xb06 <__fixunssfsi+0x26>
 ae4:	9f 57       	subi	r25, 0x7F	; 127
 ae6:	90 f0       	brcs	.+36     	; 0xb0c <__fixunssfsi+0x2c>
 ae8:	b9 2f       	mov	r27, r25
 aea:	99 27       	eor	r25, r25
 aec:	b7 51       	subi	r27, 0x17	; 23
 aee:	a0 f0       	brcs	.+40     	; 0xb18 <__fixunssfsi+0x38>
 af0:	d1 f0       	breq	.+52     	; 0xb26 <__fixunssfsi+0x46>
 af2:	66 0f       	add	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	1a f0       	brmi	.+6      	; 0xb02 <__fixunssfsi+0x22>
 afc:	ba 95       	dec	r27
 afe:	c9 f7       	brne	.-14     	; 0xaf2 <__fixunssfsi+0x12>
 b00:	12 c0       	rjmp	.+36     	; 0xb26 <__fixunssfsi+0x46>
 b02:	b1 30       	cpi	r27, 0x01	; 1
 b04:	81 f0       	breq	.+32     	; 0xb26 <__fixunssfsi+0x46>
 b06:	c3 d0       	rcall	.+390    	; 0xc8e <__fp_zero>
 b08:	b1 e0       	ldi	r27, 0x01	; 1
 b0a:	08 95       	ret
 b0c:	c0 c0       	rjmp	.+384    	; 0xc8e <__fp_zero>
 b0e:	67 2f       	mov	r22, r23
 b10:	78 2f       	mov	r23, r24
 b12:	88 27       	eor	r24, r24
 b14:	b8 5f       	subi	r27, 0xF8	; 248
 b16:	39 f0       	breq	.+14     	; 0xb26 <__fixunssfsi+0x46>
 b18:	b9 3f       	cpi	r27, 0xF9	; 249
 b1a:	cc f3       	brlt	.-14     	; 0xb0e <__fixunssfsi+0x2e>
 b1c:	86 95       	lsr	r24
 b1e:	77 95       	ror	r23
 b20:	67 95       	ror	r22
 b22:	b3 95       	inc	r27
 b24:	d9 f7       	brne	.-10     	; 0xb1c <__fixunssfsi+0x3c>
 b26:	3e f4       	brtc	.+14     	; 0xb36 <__fixunssfsi+0x56>
 b28:	90 95       	com	r25
 b2a:	80 95       	com	r24
 b2c:	70 95       	com	r23
 b2e:	61 95       	neg	r22
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	8f 4f       	sbci	r24, 0xFF	; 255
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	08 95       	ret

00000b38 <__floatunsisf>:
 b38:	e8 94       	clt
 b3a:	09 c0       	rjmp	.+18     	; 0xb4e <__floatsisf+0x12>

00000b3c <__floatsisf>:
 b3c:	97 fb       	bst	r25, 7
 b3e:	3e f4       	brtc	.+14     	; 0xb4e <__floatsisf+0x12>
 b40:	90 95       	com	r25
 b42:	80 95       	com	r24
 b44:	70 95       	com	r23
 b46:	61 95       	neg	r22
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	99 23       	and	r25, r25
 b50:	a9 f0       	breq	.+42     	; 0xb7c <__floatsisf+0x40>
 b52:	f9 2f       	mov	r31, r25
 b54:	96 e9       	ldi	r25, 0x96	; 150
 b56:	bb 27       	eor	r27, r27
 b58:	93 95       	inc	r25
 b5a:	f6 95       	lsr	r31
 b5c:	87 95       	ror	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b7 95       	ror	r27
 b64:	f1 11       	cpse	r31, r1
 b66:	f8 cf       	rjmp	.-16     	; 0xb58 <__floatsisf+0x1c>
 b68:	fa f4       	brpl	.+62     	; 0xba8 <__floatsisf+0x6c>
 b6a:	bb 0f       	add	r27, r27
 b6c:	11 f4       	brne	.+4      	; 0xb72 <__floatsisf+0x36>
 b6e:	60 ff       	sbrs	r22, 0
 b70:	1b c0       	rjmp	.+54     	; 0xba8 <__floatsisf+0x6c>
 b72:	6f 5f       	subi	r22, 0xFF	; 255
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	8f 4f       	sbci	r24, 0xFF	; 255
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	16 c0       	rjmp	.+44     	; 0xba8 <__floatsisf+0x6c>
 b7c:	88 23       	and	r24, r24
 b7e:	11 f0       	breq	.+4      	; 0xb84 <__floatsisf+0x48>
 b80:	96 e9       	ldi	r25, 0x96	; 150
 b82:	11 c0       	rjmp	.+34     	; 0xba6 <__floatsisf+0x6a>
 b84:	77 23       	and	r23, r23
 b86:	21 f0       	breq	.+8      	; 0xb90 <__floatsisf+0x54>
 b88:	9e e8       	ldi	r25, 0x8E	; 142
 b8a:	87 2f       	mov	r24, r23
 b8c:	76 2f       	mov	r23, r22
 b8e:	05 c0       	rjmp	.+10     	; 0xb9a <__floatsisf+0x5e>
 b90:	66 23       	and	r22, r22
 b92:	71 f0       	breq	.+28     	; 0xbb0 <__floatsisf+0x74>
 b94:	96 e8       	ldi	r25, 0x86	; 134
 b96:	86 2f       	mov	r24, r22
 b98:	70 e0       	ldi	r23, 0x00	; 0
 b9a:	60 e0       	ldi	r22, 0x00	; 0
 b9c:	2a f0       	brmi	.+10     	; 0xba8 <__floatsisf+0x6c>
 b9e:	9a 95       	dec	r25
 ba0:	66 0f       	add	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	da f7       	brpl	.-10     	; 0xb9e <__floatsisf+0x62>
 ba8:	88 0f       	add	r24, r24
 baa:	96 95       	lsr	r25
 bac:	87 95       	ror	r24
 bae:	97 f9       	bld	r25, 7
 bb0:	08 95       	ret

00000bb2 <__fp_cmp>:
 bb2:	99 0f       	add	r25, r25
 bb4:	00 08       	sbc	r0, r0
 bb6:	55 0f       	add	r21, r21
 bb8:	aa 0b       	sbc	r26, r26
 bba:	e0 e8       	ldi	r30, 0x80	; 128
 bbc:	fe ef       	ldi	r31, 0xFE	; 254
 bbe:	16 16       	cp	r1, r22
 bc0:	17 06       	cpc	r1, r23
 bc2:	e8 07       	cpc	r30, r24
 bc4:	f9 07       	cpc	r31, r25
 bc6:	c0 f0       	brcs	.+48     	; 0xbf8 <__fp_cmp+0x46>
 bc8:	12 16       	cp	r1, r18
 bca:	13 06       	cpc	r1, r19
 bcc:	e4 07       	cpc	r30, r20
 bce:	f5 07       	cpc	r31, r21
 bd0:	98 f0       	brcs	.+38     	; 0xbf8 <__fp_cmp+0x46>
 bd2:	62 1b       	sub	r22, r18
 bd4:	73 0b       	sbc	r23, r19
 bd6:	84 0b       	sbc	r24, r20
 bd8:	95 0b       	sbc	r25, r21
 bda:	39 f4       	brne	.+14     	; 0xbea <__fp_cmp+0x38>
 bdc:	0a 26       	eor	r0, r26
 bde:	61 f0       	breq	.+24     	; 0xbf8 <__fp_cmp+0x46>
 be0:	23 2b       	or	r18, r19
 be2:	24 2b       	or	r18, r20
 be4:	25 2b       	or	r18, r21
 be6:	21 f4       	brne	.+8      	; 0xbf0 <__fp_cmp+0x3e>
 be8:	08 95       	ret
 bea:	0a 26       	eor	r0, r26
 bec:	09 f4       	brne	.+2      	; 0xbf0 <__fp_cmp+0x3e>
 bee:	a1 40       	sbci	r26, 0x01	; 1
 bf0:	a6 95       	lsr	r26
 bf2:	8f ef       	ldi	r24, 0xFF	; 255
 bf4:	81 1d       	adc	r24, r1
 bf6:	81 1d       	adc	r24, r1
 bf8:	08 95       	ret

00000bfa <__fp_inf>:
 bfa:	97 f9       	bld	r25, 7
 bfc:	9f 67       	ori	r25, 0x7F	; 127
 bfe:	80 e8       	ldi	r24, 0x80	; 128
 c00:	70 e0       	ldi	r23, 0x00	; 0
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	08 95       	ret

00000c06 <__fp_nan>:
 c06:	9f ef       	ldi	r25, 0xFF	; 255
 c08:	80 ec       	ldi	r24, 0xC0	; 192
 c0a:	08 95       	ret

00000c0c <__fp_pscA>:
 c0c:	00 24       	eor	r0, r0
 c0e:	0a 94       	dec	r0
 c10:	16 16       	cp	r1, r22
 c12:	17 06       	cpc	r1, r23
 c14:	18 06       	cpc	r1, r24
 c16:	09 06       	cpc	r0, r25
 c18:	08 95       	ret

00000c1a <__fp_pscB>:
 c1a:	00 24       	eor	r0, r0
 c1c:	0a 94       	dec	r0
 c1e:	12 16       	cp	r1, r18
 c20:	13 06       	cpc	r1, r19
 c22:	14 06       	cpc	r1, r20
 c24:	05 06       	cpc	r0, r21
 c26:	08 95       	ret

00000c28 <__fp_round>:
 c28:	09 2e       	mov	r0, r25
 c2a:	03 94       	inc	r0
 c2c:	00 0c       	add	r0, r0
 c2e:	11 f4       	brne	.+4      	; 0xc34 <__fp_round+0xc>
 c30:	88 23       	and	r24, r24
 c32:	52 f0       	brmi	.+20     	; 0xc48 <__fp_round+0x20>
 c34:	bb 0f       	add	r27, r27
 c36:	40 f4       	brcc	.+16     	; 0xc48 <__fp_round+0x20>
 c38:	bf 2b       	or	r27, r31
 c3a:	11 f4       	brne	.+4      	; 0xc40 <__fp_round+0x18>
 c3c:	60 ff       	sbrs	r22, 0
 c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__fp_round+0x20>
 c40:	6f 5f       	subi	r22, 0xFF	; 255
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	08 95       	ret

00000c4a <__fp_split3>:
 c4a:	57 fd       	sbrc	r21, 7
 c4c:	90 58       	subi	r25, 0x80	; 128
 c4e:	44 0f       	add	r20, r20
 c50:	55 1f       	adc	r21, r21
 c52:	59 f0       	breq	.+22     	; 0xc6a <__fp_splitA+0x10>
 c54:	5f 3f       	cpi	r21, 0xFF	; 255
 c56:	71 f0       	breq	.+28     	; 0xc74 <__fp_splitA+0x1a>
 c58:	47 95       	ror	r20

00000c5a <__fp_splitA>:
 c5a:	88 0f       	add	r24, r24
 c5c:	97 fb       	bst	r25, 7
 c5e:	99 1f       	adc	r25, r25
 c60:	61 f0       	breq	.+24     	; 0xc7a <__fp_splitA+0x20>
 c62:	9f 3f       	cpi	r25, 0xFF	; 255
 c64:	79 f0       	breq	.+30     	; 0xc84 <__fp_splitA+0x2a>
 c66:	87 95       	ror	r24
 c68:	08 95       	ret
 c6a:	12 16       	cp	r1, r18
 c6c:	13 06       	cpc	r1, r19
 c6e:	14 06       	cpc	r1, r20
 c70:	55 1f       	adc	r21, r21
 c72:	f2 cf       	rjmp	.-28     	; 0xc58 <__fp_split3+0xe>
 c74:	46 95       	lsr	r20
 c76:	f1 df       	rcall	.-30     	; 0xc5a <__fp_splitA>
 c78:	08 c0       	rjmp	.+16     	; 0xc8a <__fp_splitA+0x30>
 c7a:	16 16       	cp	r1, r22
 c7c:	17 06       	cpc	r1, r23
 c7e:	18 06       	cpc	r1, r24
 c80:	99 1f       	adc	r25, r25
 c82:	f1 cf       	rjmp	.-30     	; 0xc66 <__fp_splitA+0xc>
 c84:	86 95       	lsr	r24
 c86:	71 05       	cpc	r23, r1
 c88:	61 05       	cpc	r22, r1
 c8a:	08 94       	sec
 c8c:	08 95       	ret

00000c8e <__fp_zero>:
 c8e:	e8 94       	clt

00000c90 <__fp_szero>:
 c90:	bb 27       	eor	r27, r27
 c92:	66 27       	eor	r22, r22
 c94:	77 27       	eor	r23, r23
 c96:	cb 01       	movw	r24, r22
 c98:	97 f9       	bld	r25, 7
 c9a:	08 95       	ret

00000c9c <__gesf2>:
 c9c:	8a df       	rcall	.-236    	; 0xbb2 <__fp_cmp>
 c9e:	08 f4       	brcc	.+2      	; 0xca2 <__gesf2+0x6>
 ca0:	8f ef       	ldi	r24, 0xFF	; 255
 ca2:	08 95       	ret

00000ca4 <__mulsf3>:
 ca4:	0b d0       	rcall	.+22     	; 0xcbc <__mulsf3x>
 ca6:	c0 cf       	rjmp	.-128    	; 0xc28 <__fp_round>
 ca8:	b1 df       	rcall	.-158    	; 0xc0c <__fp_pscA>
 caa:	28 f0       	brcs	.+10     	; 0xcb6 <__mulsf3+0x12>
 cac:	b6 df       	rcall	.-148    	; 0xc1a <__fp_pscB>
 cae:	18 f0       	brcs	.+6      	; 0xcb6 <__mulsf3+0x12>
 cb0:	95 23       	and	r25, r21
 cb2:	09 f0       	breq	.+2      	; 0xcb6 <__mulsf3+0x12>
 cb4:	a2 cf       	rjmp	.-188    	; 0xbfa <__fp_inf>
 cb6:	a7 cf       	rjmp	.-178    	; 0xc06 <__fp_nan>
 cb8:	11 24       	eor	r1, r1
 cba:	ea cf       	rjmp	.-44     	; 0xc90 <__fp_szero>

00000cbc <__mulsf3x>:
 cbc:	c6 df       	rcall	.-116    	; 0xc4a <__fp_split3>
 cbe:	a0 f3       	brcs	.-24     	; 0xca8 <__mulsf3+0x4>

00000cc0 <__mulsf3_pse>:
 cc0:	95 9f       	mul	r25, r21
 cc2:	d1 f3       	breq	.-12     	; 0xcb8 <__mulsf3+0x14>
 cc4:	95 0f       	add	r25, r21
 cc6:	50 e0       	ldi	r21, 0x00	; 0
 cc8:	55 1f       	adc	r21, r21
 cca:	62 9f       	mul	r22, r18
 ccc:	f0 01       	movw	r30, r0
 cce:	72 9f       	mul	r23, r18
 cd0:	bb 27       	eor	r27, r27
 cd2:	f0 0d       	add	r31, r0
 cd4:	b1 1d       	adc	r27, r1
 cd6:	63 9f       	mul	r22, r19
 cd8:	aa 27       	eor	r26, r26
 cda:	f0 0d       	add	r31, r0
 cdc:	b1 1d       	adc	r27, r1
 cde:	aa 1f       	adc	r26, r26
 ce0:	64 9f       	mul	r22, r20
 ce2:	66 27       	eor	r22, r22
 ce4:	b0 0d       	add	r27, r0
 ce6:	a1 1d       	adc	r26, r1
 ce8:	66 1f       	adc	r22, r22
 cea:	82 9f       	mul	r24, r18
 cec:	22 27       	eor	r18, r18
 cee:	b0 0d       	add	r27, r0
 cf0:	a1 1d       	adc	r26, r1
 cf2:	62 1f       	adc	r22, r18
 cf4:	73 9f       	mul	r23, r19
 cf6:	b0 0d       	add	r27, r0
 cf8:	a1 1d       	adc	r26, r1
 cfa:	62 1f       	adc	r22, r18
 cfc:	83 9f       	mul	r24, r19
 cfe:	a0 0d       	add	r26, r0
 d00:	61 1d       	adc	r22, r1
 d02:	22 1f       	adc	r18, r18
 d04:	74 9f       	mul	r23, r20
 d06:	33 27       	eor	r19, r19
 d08:	a0 0d       	add	r26, r0
 d0a:	61 1d       	adc	r22, r1
 d0c:	23 1f       	adc	r18, r19
 d0e:	84 9f       	mul	r24, r20
 d10:	60 0d       	add	r22, r0
 d12:	21 1d       	adc	r18, r1
 d14:	82 2f       	mov	r24, r18
 d16:	76 2f       	mov	r23, r22
 d18:	6a 2f       	mov	r22, r26
 d1a:	11 24       	eor	r1, r1
 d1c:	9f 57       	subi	r25, 0x7F	; 127
 d1e:	50 40       	sbci	r21, 0x00	; 0
 d20:	8a f0       	brmi	.+34     	; 0xd44 <__mulsf3_pse+0x84>
 d22:	e1 f0       	breq	.+56     	; 0xd5c <__mulsf3_pse+0x9c>
 d24:	88 23       	and	r24, r24
 d26:	4a f0       	brmi	.+18     	; 0xd3a <__mulsf3_pse+0x7a>
 d28:	ee 0f       	add	r30, r30
 d2a:	ff 1f       	adc	r31, r31
 d2c:	bb 1f       	adc	r27, r27
 d2e:	66 1f       	adc	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	91 50       	subi	r25, 0x01	; 1
 d36:	50 40       	sbci	r21, 0x00	; 0
 d38:	a9 f7       	brne	.-22     	; 0xd24 <__mulsf3_pse+0x64>
 d3a:	9e 3f       	cpi	r25, 0xFE	; 254
 d3c:	51 05       	cpc	r21, r1
 d3e:	70 f0       	brcs	.+28     	; 0xd5c <__mulsf3_pse+0x9c>
 d40:	5c cf       	rjmp	.-328    	; 0xbfa <__fp_inf>
 d42:	a6 cf       	rjmp	.-180    	; 0xc90 <__fp_szero>
 d44:	5f 3f       	cpi	r21, 0xFF	; 255
 d46:	ec f3       	brlt	.-6      	; 0xd42 <__mulsf3_pse+0x82>
 d48:	98 3e       	cpi	r25, 0xE8	; 232
 d4a:	dc f3       	brlt	.-10     	; 0xd42 <__mulsf3_pse+0x82>
 d4c:	86 95       	lsr	r24
 d4e:	77 95       	ror	r23
 d50:	67 95       	ror	r22
 d52:	b7 95       	ror	r27
 d54:	f7 95       	ror	r31
 d56:	e7 95       	ror	r30
 d58:	9f 5f       	subi	r25, 0xFF	; 255
 d5a:	c1 f7       	brne	.-16     	; 0xd4c <__mulsf3_pse+0x8c>
 d5c:	fe 2b       	or	r31, r30
 d5e:	88 0f       	add	r24, r24
 d60:	91 1d       	adc	r25, r1
 d62:	96 95       	lsr	r25
 d64:	87 95       	ror	r24
 d66:	97 f9       	bld	r25, 7
 d68:	08 95       	ret

00000d6a <__mulsi3>:
 d6a:	62 9f       	mul	r22, r18
 d6c:	d0 01       	movw	r26, r0
 d6e:	73 9f       	mul	r23, r19
 d70:	f0 01       	movw	r30, r0
 d72:	82 9f       	mul	r24, r18
 d74:	e0 0d       	add	r30, r0
 d76:	f1 1d       	adc	r31, r1
 d78:	64 9f       	mul	r22, r20
 d7a:	e0 0d       	add	r30, r0
 d7c:	f1 1d       	adc	r31, r1
 d7e:	92 9f       	mul	r25, r18
 d80:	f0 0d       	add	r31, r0
 d82:	83 9f       	mul	r24, r19
 d84:	f0 0d       	add	r31, r0
 d86:	74 9f       	mul	r23, r20
 d88:	f0 0d       	add	r31, r0
 d8a:	65 9f       	mul	r22, r21
 d8c:	f0 0d       	add	r31, r0
 d8e:	99 27       	eor	r25, r25
 d90:	72 9f       	mul	r23, r18
 d92:	b0 0d       	add	r27, r0
 d94:	e1 1d       	adc	r30, r1
 d96:	f9 1f       	adc	r31, r25
 d98:	63 9f       	mul	r22, r19
 d9a:	b0 0d       	add	r27, r0
 d9c:	e1 1d       	adc	r30, r1
 d9e:	f9 1f       	adc	r31, r25
 da0:	bd 01       	movw	r22, r26
 da2:	cf 01       	movw	r24, r30
 da4:	11 24       	eor	r1, r1
 da6:	08 95       	ret

00000da8 <__udivmodsi4>:
 da8:	a1 e2       	ldi	r26, 0x21	; 33
 daa:	1a 2e       	mov	r1, r26
 dac:	aa 1b       	sub	r26, r26
 dae:	bb 1b       	sub	r27, r27
 db0:	fd 01       	movw	r30, r26
 db2:	0d c0       	rjmp	.+26     	; 0xdce <__udivmodsi4_ep>

00000db4 <__udivmodsi4_loop>:
 db4:	aa 1f       	adc	r26, r26
 db6:	bb 1f       	adc	r27, r27
 db8:	ee 1f       	adc	r30, r30
 dba:	ff 1f       	adc	r31, r31
 dbc:	a2 17       	cp	r26, r18
 dbe:	b3 07       	cpc	r27, r19
 dc0:	e4 07       	cpc	r30, r20
 dc2:	f5 07       	cpc	r31, r21
 dc4:	20 f0       	brcs	.+8      	; 0xdce <__udivmodsi4_ep>
 dc6:	a2 1b       	sub	r26, r18
 dc8:	b3 0b       	sbc	r27, r19
 dca:	e4 0b       	sbc	r30, r20
 dcc:	f5 0b       	sbc	r31, r21

00000dce <__udivmodsi4_ep>:
 dce:	66 1f       	adc	r22, r22
 dd0:	77 1f       	adc	r23, r23
 dd2:	88 1f       	adc	r24, r24
 dd4:	99 1f       	adc	r25, r25
 dd6:	1a 94       	dec	r1
 dd8:	69 f7       	brne	.-38     	; 0xdb4 <__udivmodsi4_loop>
 dda:	60 95       	com	r22
 ddc:	70 95       	com	r23
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	9b 01       	movw	r18, r22
 de4:	ac 01       	movw	r20, r24
 de6:	bd 01       	movw	r22, r26
 de8:	cf 01       	movw	r24, r30
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>
